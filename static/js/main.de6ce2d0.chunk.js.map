{"version":3,"sources":["moralis/index.js","blockchain/web3.js","blockchain/multiSenderInterface.js","blockchain/ERC20Interface.js","blockchain/functions.js","pages/index.js","App.js","index.js"],"names":["Moralis","require","initialize","serverURL","web3","Web3","window","ethereum","givenProvider","alert","MultiSenderAddress","a","eth","Contract","MultiSender","abi","Interface","ERC20Address","ERC20","Ethsend","_to","amount","value","getFee","length","map","i","Number","multiSenderInterface","instance","methods","sendEth","send","from","selectedAddress","receipt","console","log","sendEthBulk","bulksendEth","TokenSend","tokenToSend","sendToken","sendTokenbulk","bulksendToken","estimateEthSend","fee","getGasPrice","gas","estimateGas","estimateEthBulk","estimateTokenSend","estimateTokenBulk","AproveSender","tokenAddress","erc20Interface","utils","toWei","approve","_length","error","toChecksumAddress","BatchBNB","useState","isSending","setIsSending","set_to","_amount","set_amount","transactionsNumber","setTransactionsNumber","transactionList","setTransactionList","setTokenToSend","errorMSG","setErrorMsg","textArea","setTextArea","userBalances","setUserBalances","transactionCost","setTransactionCost","transactionType","setTransactionType","balanceError","setBalanceError","selectedTokenBalance","setSelectedTokenBalance","setIsAllowed","userAddress","setUserAddress","activeStep","setActiveStep","activeTransaction","setActiveTransaction","transactionMsg","setTransactionMsg","handleFile","e","file","target","files","reader","FileReader","onload","evt","bstr","result","wb","XLSX","type","wsname","SheetNames","ws","Sheets","dataString","dataStringLines","split","headers","list","row","obj","j","d","substring","Object","values","filter","x","push","addresses","amounts","el","Address","Amount","join","checkInputs","processData","sheet_to_csv","header","readAsBinaryString","handleText","text","errormsg","line","checkAddress","nextStep","prevStep","checkAllowance","options","chain","owner_address","spender_address","address","Web3API","token","getTokenAllowance","allowance","checkBalanceForTransfer","total","totalAmount","find","token_address","decimals","balance","toFixed","checkDecimals","parseInt","toString","checkTransactionsNeeded","transactions","Math","ceil","finalTransactions","tempTo","splice","tempAmount","to","changeActiveTransaction","num","active","costOperation","cost","sendTransaction","temp","login","authenticate","then","user","get","getBalances","account","getTokenBalances","balances","getNativeBalance","nativeBalance","unshift","name","symbol","checkTransactionType","isSameAmount","sameAmount","amountToCompare","useEffect","Button","onClick","Stepper","alternativeLabel","label","Step","StepLabel","FormControl","InputLabel","Select","style","width","onChange","MenuItem","TextareaAutosize","onPaste","minRows","placeholder","disabled","variant","Stack","direction","justifyContent","alignItems","spacing","TableContainer","sx","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","index","border","new_to","key","new_amount","removeRecipient","IconButton","msg","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de6ce2d0.chunk.js","sourcesContent":["const Moralis = require(\"moralis\");\r\n\r\nMoralis.initialize(\"91M5UMZcKjdRbjbS8FMlIAD3xk39cQq2K0C6adPa\");\r\n\r\nMoralis.serverURL = \"https://x9otfdizv1zu.moralisweb3.com:2053/server\";\r\n\r\nexport default Moralis;\r\n","const Web3 = require(\"web3\");\n\nlet web3;\n\nif (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n  //we are in the browser and metamask is running\n  web3 = new Web3(Web3.givenProvider);\n} else {\n  //we are on the server or the user don't have metamask\n\n  window.alert(\"Please Install Metamask\");\n}\n\nexport default web3;\n","import web3 from \"./web3\";\r\nimport MultiSender from \"./multiSender.json\";\r\n\r\n//new contract\r\nexport const MultiSenderAddress = \"0x21F19C2e8143be3c4ED88392BC00D39b1dD46423\";\r\n//old contract\r\n// export const MultiSenderAddress = \"0x3457EbBE22064f0aC5a1C46Fc00b326fB7013cA2\";\r\n\r\nasync function Interface() {\r\n  return new web3.eth.Contract(MultiSender.abi, MultiSenderAddress);\r\n}\r\n\r\nexport default Interface;\r\n","import web3 from \"./web3\";\r\nimport ERC20 from \"./ERC20.json\";\r\n\r\nasync function Interface(ERC20Address) {\r\n  return new web3.eth.Contract(ERC20.abi, ERC20Address);\r\n}\r\n\r\nexport default Interface;\r\n","import web3 from \"./web3\";\r\nimport multiSenderInterface, {\r\n  MultiSenderAddress,\r\n} from \"./multiSenderInterface\";\r\nimport erc20Interface from \"./ERC20Interface\";\r\n\r\nexport const Ethsend = async (_to, amount) => {\r\n  try {\r\n    let value = getFee(_to.length);\r\n    amount.map((i) => (value = Number(value) + Number(i)));\r\n    let instance = await multiSenderInterface();\r\n    let receipt = await instance.methods\r\n      .sendEth(_to, amount[0])\r\n      .send({ from: window.ethereum.selectedAddress, value: value });\r\n\r\n    return receipt;\r\n  } catch (error) {\r\n    console.log(error, \"Ethsend\");\r\n  }\r\n};\r\n\r\nexport const sendEthBulk = async (_to, amount) => {\r\n  try {\r\n    let value = getFee(_to.length);\r\n    amount.map((i) => (value = Number(value) + Number(i)));\r\n    let instance = await multiSenderInterface();\r\n    let receipt = await instance.methods\r\n      .bulksendEth(_to, amount)\r\n      .send({ from: window.ethereum.selectedAddress, value: value });\r\n\r\n    return receipt;\r\n  } catch (error) {\r\n    console.log(error, \"sendEthBulk\");\r\n  }\r\n};\r\n\r\nexport const TokenSend = async (tokenToSend, _to, amount) => {\r\n  try {\r\n    let value = getFee(_to.length);\r\n    let instance = await multiSenderInterface();\r\n    let receipt = await instance.methods\r\n      .sendToken(tokenToSend, _to, amount[0])\r\n      .send({ from: window.ethereum.selectedAddress, value: value });\r\n\r\n    return receipt;\r\n  } catch (error) {\r\n    console.log(error, \"TokenSend\");\r\n  }\r\n};\r\n\r\nexport const sendTokenbulk = async (tokenToSend, _to, amount) => {\r\n  try {\r\n    let value = getFee(_to.length);\r\n    let instance = await multiSenderInterface();\r\n    let receipt = await instance.methods\r\n      .bulksendToken(tokenToSend, _to, amount)\r\n      .send({ from: window.ethereum.selectedAddress, value: value });\r\n\r\n    return receipt;\r\n  } catch (error) {\r\n    console.log(error, \"sendTokenbulk\");\r\n  }\r\n};\r\n\r\nexport const estimateEthSend = async (_to, amount) => {\r\n  try {\r\n    let fee = getFee(_to.length);\r\n    let value = fee;\r\n    amount.map((i) => (value = Number(value) + Number(i)));\r\n    let instance = await multiSenderInterface();\r\n    let gas = await web3.eth.getGasPrice();\r\n    let receipt = await instance.methods\r\n      .sendEth(_to, amount[0])\r\n      .estimateGas({ from: window.ethereum.selectedAddress, value: value });\r\n\r\n    return receipt * Number(gas) + Number(fee);\r\n  } catch (error) {\r\n    console.log(error, \"estimateEthSend\");\r\n  }\r\n};\r\n\r\nexport const estimateEthBulk = async (_to, amount) => {\r\n  try {\r\n    let fee = getFee(_to.length);\r\n    let value = fee;\r\n    amount.map((i) => (value = Number(value) + Number(i)));\r\n    let instance = await multiSenderInterface();\r\n    let gas = await web3.eth.getGasPrice();\r\n    let receipt = await instance.methods\r\n      .bulksendEth(_to, amount)\r\n      .estimateGas({ from: window.ethereum.selectedAddress, value: value });\r\n\r\n    return receipt * Number(gas) + Number(fee);\r\n  } catch (error) {\r\n    console.log(error, \"estimateEthBulk\");\r\n  }\r\n};\r\n\r\nexport const estimateTokenSend = async (tokenToSend, _to, amount) => {\r\n  try {\r\n    let value = getFee(_to.length);\r\n    let instance = await multiSenderInterface();\r\n    let gas = await web3.eth.getGasPrice();\r\n    let receipt = await instance.methods\r\n      .sendToken(tokenToSend, _to, amount[0])\r\n      .estimateGas({ from: window.ethereum.selectedAddress, value: value });\r\n\r\n    return receipt * gas;\r\n  } catch (error) {\r\n    console.log(error, \"estimateTokenSend\");\r\n  }\r\n};\r\n\r\nexport const estimateTokenBulk = async (tokenToSend, _to, amount) => {\r\n  try {\r\n    let value = getFee(_to.length);\r\n    let instance = await multiSenderInterface();\r\n    let gas = await web3.eth.getGasPrice();\r\n    let receipt = await instance.methods\r\n      .bulksendToken(tokenToSend, _to, amount)\r\n      .estimateGas({ from: window.ethereum.selectedAddress, value: value });\r\n\r\n    return receipt * gas;\r\n  } catch (error) {\r\n    console.log(error, \"estimateTokenBulk\");\r\n  }\r\n};\r\n\r\nexport const AproveSender = async (tokenAddress) => {\r\n  try {\r\n    let instance = await erc20Interface(tokenAddress);\r\n    let amount = web3.utils.toWei(\"1000000000\");\r\n    let receipt = await instance.methods\r\n      .approve(MultiSenderAddress, amount)\r\n      .send({ from: window.ethereum.selectedAddress });\r\n    return receipt;\r\n  } catch (error) {\r\n    console.log(error, \"AproveSender\");\r\n  }\r\n};\r\n\r\nconst getFee = (_length) => {\r\n  try {\r\n    if (_length <= 20) {\r\n      return web3.utils.toWei(\"0.025\");\r\n    } else if (_length <= 100) {\r\n      return web3.utils.toWei(\"0.05\");\r\n    } else if (_length <= 200) {\r\n      return web3.utils.toWei(\"0.1\");\r\n    } else if (_length <= 300) {\r\n      return web3.utils.toWei(\"0.15\");\r\n    } else if (_length <= 400) {\r\n      return web3.utils.toWei(\"0.2\");\r\n    } else {\r\n      return web3.utils.toWei(\"0.25\");\r\n    }\r\n  } catch (error) {\r\n    console.log(error, \"getFee\");\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Moralis from \"../moralis\";\r\nimport {\r\n  TextareaAutosize,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Button,\r\n  Select,\r\n  MenuItem,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Stack,\r\n  InputLabel,\r\n  FormControl,\r\n  IconButton,\r\n} from \"@mui/material\";\r\nimport NavigateBeforeIcon from \"@mui/icons-material/NavigateBefore\";\r\nimport NavigateNextIcon from \"@mui/icons-material/NavigateNext\";\r\nimport * as XLSX from \"xlsx\";\r\nimport {\r\n  sendEthBulk,\r\n  Ethsend,\r\n  sendTokenbulk,\r\n  TokenSend,\r\n  estimateEthBulk,\r\n  estimateEthSend,\r\n  estimateTokenBulk,\r\n  estimateTokenSend,\r\n  AproveSender,\r\n} from \"../blockchain/functions.js\";\r\nconst { toChecksumAddress } = require(\"ethereum-checksum-address\");\r\n\r\nfunction BatchBNB() {\r\n  const [isSending, setIsSending] = useState(false);\r\n  const [_to, set_to] = useState([]);\r\n  const [_amount, set_amount] = useState([]);\r\n  const [transactionsNumber, setTransactionsNumber] = useState(0);\r\n  const [transactionList, setTransactionList] = useState([]);\r\n  const [tokenToSend, setTokenToSend] = useState(\"\");\r\n  const [errorMSG, setErrorMsg] = useState(\"\");\r\n  const [textArea, setTextArea] = useState();\r\n  const [userBalances, setUserBalances] = useState([]);\r\n  const [transactionCost, setTransactionCost] = useState({});\r\n  const [transactionType, setTransactionType] = useState();\r\n  const [balanceError, setBalanceError] = useState(\"\");\r\n  const [selectedTokenBalance, setSelectedTokenBalance] = useState(\"\");\r\n  const [isAllowed, setIsAllowed] = useState(false);\r\n  const [userAddress, setUserAddress] = useState(\"\");\r\n  const steps = [\"Prepare\", \"Confirm\", \"Send\"];\r\n  const [activeStep, setActiveStep] = useState(0);\r\n  const [activeTransaction, setActiveTransaction] = useState(0);\r\n  const [transactionMsg, setTransactionMsg] = useState([]);\r\n\r\n  const processData = (dataString) => {\r\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\r\n    const headers = dataStringLines[0].split(\r\n      /,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/\r\n    );\r\n\r\n    const list = [];\r\n    for (let i = 1; i < dataStringLines.length; i++) {\r\n      const row = dataStringLines[i].split(\r\n        /,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/\r\n      );\r\n      if (headers && row.length === headers.length) {\r\n        const obj = {};\r\n        for (let j = 0; j < headers.length; j++) {\r\n          let d = row[j];\r\n          if (d.length > 0) {\r\n            if (d[0] === '\"') d = d.substring(1, d.length - 1);\r\n            if (d[d.length - 1] === '\"') d = d.substring(d.length - 2, 1);\r\n          }\r\n          if (headers[j]) {\r\n            obj[headers[j]] = d;\r\n          }\r\n        }\r\n\r\n        if (Object.values(obj).filter((x) => x).length > 0) {\r\n          list.push(obj);\r\n        }\r\n      }\r\n    }\r\n\r\n    let addresses = [];\r\n    let amounts = [];\r\n    let result = [];\r\n    list.map((el) => {\r\n      result.push(el.Address);\r\n      result.push(el.Amount + \"\\n\");\r\n      addresses.push(el.Address);\r\n      amounts.push(el.Amount);\r\n    });\r\n\r\n    setTextArea(result.join());\r\n    checkInputs(result);\r\n\r\n    set_amount(amounts);\r\n\r\n    set_to(addresses);\r\n    console.log(addresses, amounts);\r\n  };\r\n\r\n  function handleFile(e) {\r\n    const file = e.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.onload = (evt) => {\r\n      /* Parse data */\r\n      const bstr = evt.target.result;\r\n      const wb = XLSX.read(bstr, { type: \"binary\" });\r\n      /* Get first worksheet */\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n      processData(data);\r\n    };\r\n    reader.readAsBinaryString(file);\r\n  }\r\n\r\n  const handleText = (text) => {\r\n    let result = text.split(\" \").join(\"\").split(\"\\n\").join(\"\").split(\",\");\r\n    checkInputs(result);\r\n  };\r\n\r\n  const checkInputs = (result) => {\r\n    let addresses = [];\r\n    let amounts = [];\r\n    let errormsg = \"\";\r\n    let line = 0;\r\n    for (var i = 0; i < result.length; i += 2) {\r\n      line++;\r\n      addresses.push(result[i]);\r\n      result[i + 1] && amounts.push(result[i + 1]);\r\n      let checkAddress;\r\n      try {\r\n        checkAddress = toChecksumAddress(result[i]);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n\r\n      if (!checkAddress) {\r\n        errormsg = `line ${line}: ${result[i]} is a invalid wallet address and wrong amount. E.g:address,number`;\r\n      } else if (!Number(result[i + 1])) {\r\n        errormsg = `line ${line}: ${result[i + 1]}  is a invalid wrong amount`;\r\n      }\r\n    }\r\n    setErrorMsg(errormsg);\r\n    set_to(addresses);\r\n    set_amount(amounts);\r\n  };\r\n\r\n  const nextStep = () => {\r\n    setActiveStep(activeStep + 1);\r\n  };\r\n\r\n  const prevStep = () => {\r\n    setActiveStep(activeStep - 1);\r\n  };\r\n\r\n  const checkAllowance = async () => {\r\n    if (tokenToSend !== \"BNB\") {\r\n      try {\r\n        const options = {\r\n          chain: \"bsc testnet\",\r\n          owner_address: window.ethereum.selectedAddress,\r\n          spender_address: \"0x3457EbBE22064f0aC5a1C46Fc00b326fB7013cA2\",\r\n          address: tokenToSend,\r\n        };\r\n        const allowance = await Moralis.Web3API.token.getTokenAllowance(\r\n          options\r\n        );\r\n        if (Number(allowance.allowance) < 500000 * 10 ** 18) {\r\n          setIsAllowed(false);\r\n        } else {\r\n          setIsAllowed(true);\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkBalanceForTransfer = async () => {\r\n    let total = totalAmount();\r\n\r\n    let token = await userBalances.find((e) => e.token_address === tokenToSend);\r\n    let decimals = token.decimals || 18;\r\n    let balance = (token.balance / 10 ** decimals).toFixed(4);\r\n    setSelectedTokenBalance(balance);\r\n\r\n    if (total > balance) {\r\n      setBalanceError(\"Not Enough Balance to Transfer\");\r\n    } else if (!transactionCost) {\r\n      setBalanceError(\r\n        \"Can't calculate transaction cost, transaction may fail, please verify if the token is approved for transfer\"\r\n      );\r\n    } else {\r\n      setBalanceError(\"\");\r\n    }\r\n\r\n    return balance;\r\n  };\r\n\r\n  const removeRecipient = (index) => {\r\n    const new_to = _to.filter((el, key) => {\r\n      return key !== index;\r\n    });\r\n    const new_amount = _amount.filter((el, key) => {\r\n      return key !== index;\r\n    });\r\n\r\n    set_to(new_to);\r\n    set_amount(new_amount);\r\n  };\r\n\r\n  const totalAmount = () => {\r\n    let total = 0;\r\n    _amount.map((el) => (total = total + Number(el)));\r\n    return total.toFixed(4);\r\n  };\r\n\r\n  const checkDecimals = async () => {\r\n    try {\r\n      let token = await userBalances.find(\r\n        (e) => e.token_address === tokenToSend\r\n      );\r\n      let decimals = token.decimals || 18;\r\n      let amount = [];\r\n\r\n      if (decimals === 18) {\r\n        _amount.map((el) => {\r\n          return amount.push(parseInt(el * 10 ** 18).toString());\r\n        });\r\n      } else {\r\n        _amount.map((el) => {\r\n          return amount.push(parseInt(el * 10 ** decimals).toString());\r\n        });\r\n      }\r\n      return amount;\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const checkTransactionsNeeded = async () => {\r\n    let transactions = Math.ceil(_to.length / 500);\r\n    setTransactionsNumber(transactions);\r\n\r\n    let finalTransactions = [];\r\n\r\n    for (let i = 0; i < _to.length; i + 500) {\r\n      let tempTo = _to.splice(i, i + 500);\r\n      let tempAmount = _amount.splice(i, i + 500);\r\n      finalTransactions.push({ to: tempTo, amount: tempAmount });\r\n    }\r\n    set_to(finalTransactions[0].to);\r\n    set_amount(finalTransactions[0].amount);\r\n    setTransactionList(finalTransactions);\r\n    console.log(transactionList);\r\n  };\r\n\r\n  const changeActiveTransaction = async (num) => {\r\n    let active;\r\n    if (num >= transactionList.length) {\r\n      active = 0;\r\n    } else if (num < 0) {\r\n      active = transactionList.length - 1;\r\n    } else {\r\n      active = num;\r\n    }\r\n\r\n    setActiveTransaction(active);\r\n    set_to(transactionList[active].to);\r\n    set_amount(transactionList[active].amount);\r\n  };\r\n\r\n  const costOperation = async () => {\r\n    let cost;\r\n    let amount = await checkDecimals();\r\n\r\n    if (transactionType === \"sendETH\") {\r\n      cost = await estimateEthSend(_to, amount);\r\n    } else if (transactionType === \"bulkETH\") {\r\n      cost = await estimateEthBulk(_to, amount);\r\n    } else if (transactionType === \"sendToken\") {\r\n      cost = await estimateTokenSend(tokenToSend, _to, amount);\r\n    } else if (transactionType === \"bulkToken\") {\r\n      cost = await estimateTokenBulk(tokenToSend, _to, amount);\r\n    }\r\n\r\n    if (cost) {\r\n      cost = (cost / 10 ** 18).toFixed(4);\r\n      setTransactionCost(cost + \" BNB\");\r\n    } else {\r\n      setTransactionCost(\"can't calculate transaction cost\");\r\n    }\r\n  };\r\n\r\n  const sendTransaction = async () => {\r\n    setIsSending(true);\r\n\r\n    let amount = await checkDecimals();\r\n    console.log(_to, amount);\r\n\r\n    let receipt;\r\n    if (transactionType === \"sendETH\") {\r\n      receipt = await Ethsend(_to, amount);\r\n    } else if (transactionType === \"bulkETH\") {\r\n      receipt = await sendEthBulk(_to, amount);\r\n    } else if (transactionType === \"sendToken\") {\r\n      receipt = await TokenSend(tokenToSend, _to, amount);\r\n    } else if (transactionType === \"bulkToken\") {\r\n      receipt = await sendTokenbulk(tokenToSend, _to, amount);\r\n    }\r\n    if (receipt) {\r\n      console.log(receipt);\r\n      let temp = transactionMsg;\r\n      temp.push(`Transaction ${activeTransaction + 1} Succesful`);\r\n      setTransactionMsg(temp);\r\n      changeActiveTransaction(activeTransaction + 1);\r\n    }\r\n    setIsSending(false);\r\n  };\r\n\r\n  const login = async () => {\r\n    await Moralis.authenticate().then(function (user) {\r\n      setUserAddress(user.get(\"ethAddress\"));\r\n      getBalances();\r\n    });\r\n  };\r\n\r\n  const getBalances = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const options = {\r\n          chain: \"bsc testnet\",\r\n          address: window.ethereum.selectedAddress,\r\n        };\r\n        const balances = await Moralis.Web3API.account.getTokenBalances(\r\n          options\r\n        );\r\n        const nativeBalance = await Moralis.Web3API.account.getNativeBalance(\r\n          options\r\n        );\r\n\r\n        balances.unshift({\r\n          name: \"BNB\",\r\n          symbol: \"BNB\",\r\n          token_address: \"BNB\",\r\n          balance: nativeBalance.balance,\r\n        });\r\n        setUserBalances(balances);\r\n      } catch (error) {\r\n        console.log(\"error\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const sameAmount = () => {\r\n    let sameAmount = true;\r\n    let amountToCompare = _amount[0];\r\n    _amount.map((i) => {\r\n      if (i !== amountToCompare) {\r\n        return (sameAmount = false);\r\n      }\r\n      return i;\r\n    });\r\n    return sameAmount;\r\n  };\r\n\r\n  const checkTransactionType = () => {\r\n    let isSameAmount = sameAmount();\r\n\r\n    if (tokenToSend === \"BNB\") {\r\n      if (isSameAmount) {\r\n        setTransactionType(\"sendETH\");\r\n      } else {\r\n        setTransactionType(\"bulkETH\");\r\n      }\r\n    } else {\r\n      if (isSameAmount) {\r\n        setTransactionType(\"sendToken\");\r\n      } else {\r\n        setTransactionType(\"bulkToken\");\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBalances();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    costOperation();\r\n  }, [activeStep]);\r\n\r\n  // useEffect(() => {\r\n  //   checkAllowance();\r\n  // }, [tokenToSend]);\r\n\r\n  return (\r\n    <div>\r\n      {userAddress ? (\r\n        <h4>\r\n          <Button onClick={() => login()}>\r\n            {userAddress?.substring(0, 10)}...{userAddress?.substring(36, 42)}{\" \"}\r\n          </Button>\r\n        </h4>\r\n      ) : (\r\n        <Button onClick={() => login()}> login </Button>\r\n      )}\r\n\r\n      <h2>MultiSender</h2>\r\n      <Stepper activeStep={activeStep} alternativeLabel>\r\n        {steps.map((label) => (\r\n          <Step key={label}>\r\n            <StepLabel>{label}</StepLabel>\r\n          </Step>\r\n        ))}\r\n      </Stepper>\r\n      {activeStep === 0 && (\r\n        <>\r\n          {\" \"}\r\n          <br />\r\n          <h3>Token</h3>\r\n          <FormControl>\r\n            <InputLabel>Select a Token</InputLabel>\r\n            <Select\r\n              style={{ width: 600 }}\r\n              label=\"Select a Token\"\r\n              value={tokenToSend}\r\n              onChange={(e) => {\r\n                setTokenToSend(e.target.value);\r\n                checkAllowance();\r\n              }}\r\n            >\r\n              {userBalances.map((token) => {\r\n                const { token_address, name } = token;\r\n\r\n                return (\r\n                  <MenuItem key={token_address} value={token_address}>\r\n                    {name} - {token_address}\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n          <br />\r\n          <h3>Addresses with Amounts</h3>\r\n          <input type=\"file\" onChange={(e) => handleFile(e)} />\r\n          <br />\r\n          <TextareaAutosize\r\n            aria-label=\"minimum height\"\r\n            value={textArea}\r\n            onChange={(e) => {\r\n              setTextArea(e.target.value);\r\n              handleText(e.target.value);\r\n            }}\r\n            onPaste={(e) => {\r\n              setTextArea(e.target.value);\r\n              handleText(e.target.value);\r\n            }}\r\n            setTextArea\r\n            minRows={4}\r\n            placeholder=\"Insert Address and Amount separated by comma\"\r\n            style={{\r\n              width: 600,\r\n              \"max-height\": \"400px\",\r\n              \"min-width\": \"200px\",\r\n              \"overflow-y\": \"scroll\",\r\n            }}\r\n          />\r\n          <h6>The address and amount are separated by commas</h6>\r\n          {errorMSG && <h3>{errorMSG}</h3>}\r\n          <br />\r\n          <Button\r\n            disabled={tokenToSend === \"\" || errorMSG ? 1 : 0}\r\n            // disabled={!isAllowed ? 1 : 0}\r\n            onClick={() => {\r\n              nextStep();\r\n              checkTransactionType();\r\n              checkBalanceForTransfer();\r\n              checkTransactionsNeeded();\r\n            }}\r\n            variant=\"contained\"\r\n          >\r\n            next\r\n          </Button>\r\n          <br />\r\n          <br />\r\n          <Button variant=\"contained\" onClick={() => AproveSender(tokenToSend)}>\r\n            Aprove Token!\r\n          </Button>\r\n        </>\r\n      )}\r\n      {activeStep === 1 && (\r\n        <Stack\r\n          direction=\"column\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          spacing={1}\r\n        >\r\n          <h3>List of Recipients</h3>{\" \"}\r\n          <TableContainer\r\n            sx={{ width: 650 }}\r\n            component={Paper}\r\n            style={{\r\n              \"max-height\": \"400px\",\r\n\r\n              \"overflow-y\": \"scroll\",\r\n            }}\r\n          >\r\n            <Table sx={{ width: 650 }} aria-label=\"simple table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell align=\"left\">Address</TableCell>\r\n                  <TableCell align=\"left\">Amount</TableCell>\r\n                  <TableCell align=\"center\"></TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {_to.map((address, index) => (\r\n                  <TableRow\r\n                    key={index}\r\n                    sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n                  >\r\n                    <TableCell align=\"left\">{address}</TableCell>\r\n                    <TableCell align=\"left\">{_amount[index]}</TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Button onClick={() => removeRecipient(index)}>\r\n                        {\" \"}\r\n                        remove\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell align=\"left\">\r\n                    Total Recipients: {_to.length}\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    Total Amount: {totalAmount()}\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n            </Table>\r\n          </TableContainer>\r\n          <br />\r\n          {transactionList.length > 0 && (\r\n            <Stack\r\n              direction=\"row\"\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n              spacing={2}\r\n            >\r\n              <IconButton\r\n                onClick={() => changeActiveTransaction(activeTransaction - 1)}\r\n              >\r\n                {\" \"}\r\n                <NavigateBeforeIcon />\r\n              </IconButton>{\" \"}\r\n              <h4>\r\n                Transaction {activeTransaction + 1} of {transactionList.length}{\" \"}\r\n              </h4>\r\n              <IconButton\r\n                onClick={() => changeActiveTransaction(activeTransaction + 1)}\r\n              >\r\n                {\" \"}\r\n                <NavigateNextIcon />\r\n              </IconButton>{\" \"}\r\n            </Stack>\r\n          )}\r\n          <br />\r\n          <TableContainer sx={{ width: 650 }} component={Paper}>\r\n            <Table sx={{ width: 650 }} aria-label=\"simple table\">\r\n              <TableBody>\r\n                <TableRow key={\"a\"}>\r\n                  <TableCell align=\"left\">\r\n                    Total Number of Addresses: {_to.length}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    Total Number of Tokens to be Sent: {totalAmount()}{\" \"}\r\n                    {\r\n                      userBalances.find((e) => e.token_address === tokenToSend)\r\n                        .symbol\r\n                    }\r\n                  </TableCell>\r\n                </TableRow>\r\n                <TableRow key={\"b\"}>\r\n                  <TableCell align=\"left\">\r\n                    Number of Transactions Needed: {transactionsNumber}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    Your Token Balance: {selectedTokenBalance}{\" \"}\r\n                    {\r\n                      userBalances.find((e) => e.token_address === tokenToSend)\r\n                        .symbol\r\n                    }\r\n                  </TableCell>\r\n                </TableRow>\r\n                <TableRow key={\"c\"}>\r\n                  <TableCell align=\"left\">\r\n                    Approximate Cost Operation: {transactionCost}\r\n                  </TableCell>\r\n                  <TableCell align=\"right\">\r\n                    {(Number(userBalances[0].balance) / 10 ** 18).toFixed(4)}{\" \"}\r\n                    BNB\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <br />\r\n          {balanceError && <h3>{balanceError}</h3>}\r\n          <br />\r\n          <Stack\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Button onClick={() => prevStep()} variant=\"contained\">\r\n              prev\r\n            </Button>\r\n\r\n            <Button\r\n              // disabled={balanceError ? 1 : 0}\r\n              onClick={() => {\r\n                nextStep();\r\n                changeActiveTransaction(0);\r\n              }}\r\n              variant=\"contained\"\r\n            >\r\n              next\r\n            </Button>\r\n          </Stack>\r\n        </Stack>\r\n      )}\r\n      {activeStep === 2 && (\r\n        <>\r\n          {transactionMsg.length === transactionList.length ? (\r\n            <h4>All transactions sended</h4>\r\n          ) : (\r\n            <>\r\n              <h4>\r\n                Sending Transaction {activeTransaction + 1} of{\" \"}\r\n                {transactionList.length}{\" \"}\r\n              </h4>\r\n              <Button\r\n                disabled={isSending ? 1 : 0}\r\n                onClick={() => sendTransaction()}\r\n                variant=\"contained\"\r\n              >\r\n                {isSending ? \"Sending...\" : \"Send Transaction\"}\r\n              </Button>\r\n            </>\r\n          )}\r\n\r\n          <br />\r\n          <br />\r\n          <Stack\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Button onClick={() => prevStep()} variant=\"contained\">\r\n              prev\r\n            </Button>\r\n          </Stack>\r\n          {transactionMsg.length > 0 &&\r\n            transactionMsg.map((msg) => <h4>{msg}</h4>)}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BatchBNB;\r\n","import \"./App.css\";\r\nimport MultiSender from \"./pages\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MultiSender />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport \"@fontsource/roboto/300.css\";\r\nimport \"@fontsource/roboto/400.css\";\r\nimport \"@fontsource/roboto/500.css\";\r\nimport \"@fontsource/roboto/700.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}