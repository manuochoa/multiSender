{"version":3,"sources":["moralis/index.js","blockchain/web3.js","blockchain/multiSenderInterface.js","blockchain/ERC20Interface.js","blockchain/functions.js","pages/index.js","App.js","index.js"],"names":["Moralis","require","initialize","serverURL","web3","Web3","window","ethereum","givenProvider","alert","MultiSenderAddress","a","eth","Contract","MultiSender","abi","Interface","ERC20Address","ERC20","Ethsend","_to","amount","value","map","i","Number","multiSenderInterface","instance","methods","sendEth","send","from","selectedAddress","receipt","console","log","sendEthBulk","bulksendEth","TokenSend","tokenToSend","sendToken","sendTokenbulk","bulksendToken","estimateEthSend","getGasPrice","gas","estimateGas","estimateEthBulk","estimateTokenSend","estimateTokenBulk","AproveSender","erc20Interface","utils","toWei","approve","toChecksumAddress","BatchBNB","useState","isSending","setIsSending","set_to","_amount","set_amount","setTokenToSend","errorMSG","setErrorMsg","textArea","setTextArea","userBalances","setUserBalances","transactionCost","setTransactionCost","transactionType","setTransactionType","balanceError","setBalanceError","selectedTokenBalance","setSelectedTokenBalance","setIsAllowed","userAddress","setUserAddress","activeStep","setActiveStep","handleFile","e","file","target","files","reader","FileReader","onload","evt","bstr","result","wb","XLSX","type","wsname","SheetNames","ws","Sheets","dataString","dataStringLines","split","headers","list","length","row","obj","j","d","substring","Object","values","filter","x","push","c","name","selector","addresses","amounts","el","Address","Amount","join","checkInputs","processData","sheet_to_csv","header","readAsBinaryString","handleText","text","errormsg","line","toString","checkAddress","error","nextStep","prevStep","checkAllowance","options","chain","owner_address","spender_address","address","Web3API","token","getTokenAllowance","allowance","checkBalanceForTransfer","total","totalAmount","find","token_address","decimals","balance","checkDecimals","temp","costOperation","cost","sendTransaction","login","authenticate","then","user","get","getBalances","account","getTokenBalances","balances","getNativeBalance","nativeBalance","unshift","checkTransactionType","isSameAmount","sameAmount","amountToCompare","useEffect","Button","onClick","Stepper","alternativeLabel","label","Step","StepLabel","FormControl","InputLabel","Select","style","width","MenuItem","onChange","TextareaAutosize","onPaste","minRows","placeholder","disabled","variant","Stack","direction","justifyContent","alignItems","spacing","TableContainer","sx","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","index","border","new_to","key","new_amount","removeRecipient","symbol","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iSAAMA,EAAUC,EAAQ,KAExBD,EAAQE,WAAW,4CAEnBF,EAAQG,UAAY,mDAELH,ICJXI,EDIWJ,I,mLCNTK,EAAOJ,EAAQ,KAIC,qBAAXK,QAAqD,qBAApBA,OAAOC,SAEjDH,EAAO,IAAIC,EAAKA,EAAKG,eAIrBF,OAAOG,MAAM,2BAGAL,Q,SCVFM,EAAqB,6C,4CAElC,sBAAAC,EAAA,+EACS,IAAIP,EAAKQ,IAAIC,SAASC,EAAYC,IAAKL,IADhD,4C,sBAIeM,M,gGCNf,WAAyBC,GAAzB,eAAAN,EAAA,sEACmBN,IADnB,cACMD,EADN,yBAES,IAAIA,EAAKQ,IAAIC,SAASK,EAAMH,IAAKE,IAF1C,4C,sBAKeD,M,4CCFFG,EAAO,uCAAG,WAAOC,EAAKC,GAAZ,mBAAAV,EAAA,sEAEfW,EAAQ,KACZD,EAAOE,KAAI,SAACC,GAAD,OAAQF,GAAgBG,OAAOD,MAHvB,SAIEE,IAJF,cAIfC,EAJe,gBAKCA,EAASC,QAC1BC,QAAQT,EAAKC,EAAO,IACpBS,KAAK,CAAEC,KAAMzB,OAAOC,SAASyB,gBAAiBV,MAAOA,IAPrC,cAKfW,EALe,yBASZA,GATY,kCAWnBC,QAAQC,IAAR,KAAmB,WAXA,0DAAH,wDAePC,EAAW,uCAAG,WAAOhB,EAAKC,GAAZ,mBAAAV,EAAA,sEAEnBW,EAAQ,KACZD,EAAOE,KAAI,SAACC,GAAD,OAAQF,GAAgBG,OAAOD,MAHnB,SAIFE,IAJE,cAInBC,EAJmB,gBAKHA,EAASC,QAC1BS,YAAYjB,EAAKC,GACjBS,KAAK,CAAEC,KAAMzB,OAAOC,SAASyB,gBAAiBV,MAAOA,IAPjC,cAKnBW,EALmB,yBAShBA,GATgB,kCAWvBC,QAAQC,IAAR,KAAmB,eAXI,0DAAH,wDAeXG,EAAS,uCAAG,WAAOC,EAAanB,EAAKC,GAAzB,mBAAAV,EAAA,sEAEjBW,EAAQ,KAFS,SAGAI,IAHA,cAGjBC,EAHiB,gBAIDA,EAASC,QAC1BY,UAAUD,EAAanB,EAAKC,EAAO,IACnCS,KAAK,CAAEC,KAAMzB,OAAOC,SAASyB,gBAAiBV,MAAOA,IANnC,cAIjBW,EAJiB,yBAQdA,GARc,kCAUrBC,QAAQC,IAAR,KAAmB,aAVE,0DAAH,0DAcTM,EAAa,uCAAG,WAAOF,EAAanB,EAAKC,GAAzB,mBAAAV,EAAA,sEAErBW,EAAQ,KAFa,SAGJI,IAHI,cAGrBC,EAHqB,gBAILA,EAASC,QAC1Bc,cAAcH,EAAanB,EAAKC,GAChCS,KAAK,CAAEC,KAAMzB,OAAOC,SAASyB,gBAAiBV,MAAOA,IAN/B,cAIrBW,EAJqB,yBAQlBA,GARkB,kCAUzBC,QAAQC,IAAR,KAAmB,iBAVM,0DAAH,0DAcbQ,EAAe,uCAAG,WAAOvB,EAAKC,GAAZ,qBAAAV,EAAA,sEAEvBW,EAAQ,KACZD,EAAOE,KAAI,SAACC,GAAD,OAAQF,GAAgBG,OAAOD,MAHf,SAINE,IAJM,cAIvBC,EAJuB,gBAKXvB,EAAKQ,IAAIgC,cALE,cAKvBC,EALuB,iBAMPlB,EAASC,QAC1BC,QAAQT,EAAKC,EAAO,IACpByB,YAAY,CAAEf,KAAMzB,OAAOC,SAASyB,gBAAiBV,MAAOA,IARpC,eAMvBW,EANuB,OAU3BC,QAAQC,IAAIF,EAASY,EAAK,OAVC,kBAYpBZ,EAAUY,EAAM,KAZI,kCAc3BX,QAAQC,IAAR,KAAmB,mBAdQ,0DAAH,wDAkBfY,EAAe,uCAAG,WAAO3B,EAAKC,GAAZ,qBAAAV,EAAA,sEAEvBW,EAAQ,KACZD,EAAOE,KAAI,SAACC,GAAD,OAAQF,GAAgBG,OAAOD,MAHf,SAINE,IAJM,cAIvBC,EAJuB,gBAKXvB,EAAKQ,IAAIgC,cALE,cAKvBC,EALuB,iBAMPlB,EAASC,QAC1BS,YAAYjB,EAAKC,GACjByB,YAAY,CAAEf,KAAMzB,OAAOC,SAASyB,gBAAiBV,MAAOA,IARpC,eAMvBW,EANuB,OAU3BC,QAAQC,IAAIF,EAASY,EAAK,OAVC,kBAYpBZ,EAAUY,EAAM,KAZI,kCAc3BX,QAAQC,IAAR,KAAmB,mBAdQ,0DAAH,wDAkBfa,EAAiB,uCAAG,WAAOT,EAAanB,EAAKC,GAAzB,qBAAAV,EAAA,sEAEzBW,EAAQ,KAFiB,SAGRI,IAHQ,cAGzBC,EAHyB,gBAIbvB,EAAKQ,IAAIgC,cAJI,cAIzBC,EAJyB,iBAKTlB,EAASC,QAC1BY,UAAUD,EAAanB,EAAKC,EAAO,IACnCyB,YAAY,CAAEf,KAAMzB,OAAOC,SAASyB,gBAAiBV,MAAOA,IAPlC,eAKzBW,EALyB,OAS7BC,QAAQC,IAAIF,EAASY,EAAK,OATG,kBAWtBZ,EAAUY,EAAM,KAXM,kCAa7BX,QAAQC,IAAR,KAAmB,qBAbU,0DAAH,0DAiBjBc,EAAiB,uCAAG,WAAOV,EAAanB,EAAKC,GAAzB,qBAAAV,EAAA,sEAE7BuB,QAAQC,IAAII,EAAanB,EAAKC,GAC1BC,EAAQ,KAHiB,SAIRI,IAJQ,cAIzBC,EAJyB,gBAKbvB,EAAKQ,IAAIgC,cALI,cAKzBC,EALyB,iBAMTlB,EAASC,QAC1Bc,cAAcH,EAAanB,EAAKC,GAChCyB,YAAY,CAAEf,KAAMzB,OAAOC,SAASyB,gBAAiBV,MAAOA,IARlC,eAMzBW,EANyB,OAU7BC,QAAQC,IAAIF,EAASY,EAAK,OAVG,kBAYtBZ,EAAUY,EAAM,KAZM,kCAc7BX,QAAQC,IAAR,KAAmB,qBAdU,0DAAH,0DAkBjBe,EAAY,uCAAG,gCAAAvC,EAAA,+EAEHwC,IAFG,cAEpBxB,EAFoB,OAGpBN,EAASjB,EAAKgD,MAAMC,MAAM,YAHN,SAIJ1B,EAASC,QAC1B0B,QAAQ5C,EAAoBW,GAC5BS,KAAK,CAAEC,KAAMzB,OAAOC,SAASyB,kBANR,cAIpBC,EAJoB,yBAOjBA,GAPiB,kCASxBC,QAAQC,IAAR,KAAmB,gBATK,0DAAH,qD,OCtGjBoB,EAAsBtD,EAAQ,MAA9BsD,kBAwiBOC,MAtiBf,WAAqB,IAAD,EAClB,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAsBF,mBAAS,IAA/B,mBAAOrC,EAAP,KAAYwC,EAAZ,KACA,EAA8BH,mBAAS,IAAvC,mBAAOI,EAAP,KAAgBC,EAAhB,KACA,EAAsCL,mBAAS,IAA/C,mBAAOlB,EAAP,KAAoBwB,EAApB,KACA,EAAgCN,mBAAS,IAAzC,mBAAOO,GAAP,KAAiBC,GAAjB,KACA,GAAgCR,qBAAhC,qBAAOS,GAAP,MAAiBC,GAAjB,MACA,GAAwCV,mBAAS,IAAjD,qBAAOW,GAAP,MAAqBC,GAArB,MACA,GAA8CZ,qBAA9C,qBAAOa,GAAP,MAAwBC,GAAxB,MACA,GAA8Cd,qBAA9C,qBAAOe,GAAP,MAAwBC,GAAxB,MACA,GAAwChB,mBAAS,IAAjD,qBAAOiB,GAAP,MAAqBC,GAArB,MACA,GAAwDlB,mBAAS,IAAjE,qBAAOmB,GAAP,MAA6BC,GAA7B,MACA,GAAkCpB,oBAAS,GAA3C,qBAAkBqB,IAAlB,aACA,GAAsCrB,mBAAS,IAA/C,qBAAOsB,GAAP,MAAoBC,GAApB,MAEA,GAAoCvB,mBAAS,GAA7C,qBAAOwB,GAAP,MAAmBC,GAAnB,MAsDA,SAASC,GAAWC,GAClB,IAAMC,EAAOD,EAAEE,OAAOC,MAAM,GACtBC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACC,GAEf,IAAMC,EAAOD,EAAIL,OAAOO,OAClBC,EAAKC,OAAUH,EAAM,CAAEI,KAAM,WAE7BC,EAASH,EAAGI,WAAW,GACvBC,EAAKL,EAAGM,OAAOH,IA7DL,SAACI,GAOnB,IANA,IAAMC,EAAkBD,EAAWE,MAAM,WACnCC,EAAUF,EAAgB,GAAGC,MACjC,uCAGIE,EAAO,GACJjF,EAAI,EAAGA,EAAI8E,EAAgBI,OAAQlF,IAAK,CAC/C,IAAMmF,EAAML,EAAgB9E,GAAG+E,MAC7B,uCAEF,GAAIC,GAAWG,EAAID,SAAWF,EAAQE,OAAQ,CAE5C,IADA,IAAME,EAAM,GACHC,EAAI,EAAGA,EAAIL,EAAQE,OAAQG,IAAK,CACvC,IAAIC,EAAIH,EAAIE,GACRC,EAAEJ,OAAS,IACA,MAATI,EAAE,KAAYA,EAAIA,EAAEC,UAAU,EAAGD,EAAEJ,OAAS,IACxB,MAApBI,EAAEA,EAAEJ,OAAS,KAAYI,EAAIA,EAAEC,UAAUD,EAAEJ,OAAS,EAAG,KAEzDF,EAAQK,KACVD,EAAIJ,EAAQK,IAAMC,GAIlBE,OAAOC,OAAOL,GAAKM,QAAO,SAACC,GAAD,OAAOA,KAAGT,OAAS,GAC/CD,EAAKW,KAAKR,IAKAJ,EAAQjF,KAAI,SAAC8F,GAAD,MAAQ,CAClCC,KAAMD,EACNE,SAAUF,MAFZ,IAIIG,EAAY,GACZC,EAAU,GACV5B,EAAS,GACbY,EAAKlF,KAAI,SAACmG,GACR7B,EAAOuB,KAAKM,EAAGC,SACf9B,EAAOuB,KAAKM,EAAGE,OAAS,MACxBJ,EAAUJ,KAAKM,EAAGC,SAClBF,EAAQL,KAAKM,EAAGE,WAGlBzD,GAAY0B,EAAOgC,QACnBC,GAAYjC,GAEZ/B,EAAW2D,GAEX7D,EAAO4D,GAeLO,CADahC,QAAWiC,aAAa7B,EAAI,CAAE8B,OAAQ,MAGrDzC,EAAO0C,mBAAmB7C,GAG5B,IAAM8C,GAAa,SAACC,GAClB,IAAIvC,EAASuC,EAAK7B,MAAM,KAAKsB,KAAK,IAAItB,MAAM,MAAMsB,KAAK,IAAItB,MAAM,KACjEuB,GAAYjC,IAGRiC,GAAc,SAACjC,GAKnB,IAJA,IAAI2B,EAAY,GACZC,EAAU,GACVY,EAAW,GACXC,EAAO,EACF9G,EAAI,EAAGA,EAAIqE,EAAOa,OAAQlF,GAAK,EAAG,CACzC8G,IACAd,EAAUJ,KAAKvB,EAAOrE,IACtBqE,EAAOrE,EAAI,IAAMiG,EAAQL,MAAMvB,EAAOrE,EAAI,GAAX,SAAgB,GAAM,KAAI+G,YACzD,IAAIC,OAAY,EAChB,IACEA,EAAejF,EAAkBsC,EAAOrE,IACxC,MAAOiH,GACPvG,QAAQC,IAAIsG,GAGTD,EAEO/G,OAAOoE,EAAOrE,EAAI,MAC5B6G,EAAQ,eAAWC,EAAX,aAAoBzC,EAAOrE,EAAI,GAA/B,gCAFR6G,EAAQ,eAAWC,EAAX,aAAoBzC,EAAOrE,GAA3B,qEAKZyC,GAAYoE,GACZzE,EAAO4D,GACP1D,EAAW2D,IAGPiB,GAAW,WACfxD,GAAcD,GAAa,IAGvB0D,GAAW,WACfzD,GAAcD,GAAa,IAGvB2D,GAAc,uCAAG,8BAAAjI,EAAA,yDACD,QAAhB4B,EADiB,iCAGXsG,EAAU,CACdC,MAAO,cACPC,cAAezI,OAAOC,SAASyB,gBAC/BgH,gBAAiB,6CACjBC,QAAS1G,GAPM,SASOvC,EAAQkJ,QAAQC,MAAMC,kBAC5CP,GAVe,OASXQ,EATW,OAYb5H,OAAO4H,EAAUA,WAAa,aAAS,GAAM,IAC/CvE,IAAa,GAEbA,IAAa,GAfE,gDAkBjB5C,QAAQC,IAAR,MAlBiB,yDAAH,qDAuBdmH,GAAuB,uCAAG,kCAAA3I,EAAA,6DAC1B4I,EAAQC,KADkB,SAGZpF,GAAaqF,MAAK,SAACrE,GAAD,OAAOA,EAAEsE,gBAAkBnH,KAHjC,cAG1B4G,EAH0B,OAI1BQ,EAAWR,EAAMQ,UAAY,GAC7BC,EAAUT,EAAMS,QAAN,SAAgB,GAAMD,GACpC9E,GAAwB+E,GAGtBjF,GADE4E,EAAQK,EACM,iCACNtF,GAKM,GAHd,+GAZ0B,kBAkBvBsF,GAlBuB,2CAAH,qDAiCvBJ,GAAc,WAClB,IAAID,EAAQ,EAEZ,OADA1F,EAAQtC,KAAI,SAACmG,GAAD,OAAS6B,GAAgB9H,OAAOiG,GAAP,SAAa,GAAM,OACjD6B,GAGHM,GAAa,uCAAG,gCAAAlJ,EAAA,+EAEAyD,GAAaqF,MAC7B,SAACrE,GAAD,OAAOA,EAAEsE,gBAAkBnH,KAHX,UAEd4G,EAFc,OAOD,MAFbQ,EAAWR,EAAMQ,UAAY,IALf,yCAQT9F,GARS,cAUZxC,EAAS,GACbwC,EAAQtC,KAAI,SAACmG,GACX,IAAIoC,EAAOpC,EAAE,SAAG,GAAM,IACtBrG,EAAO+F,MAAM0C,EAAI,SAAG,GAAMH,IAAUpB,eAbtB,kBAeTlH,GAfS,0DAkBlBa,QAAQC,IAAR,MAlBkB,0DAAH,qDAsBb4H,GAAa,uCAAG,8BAAApJ,EAAA,sEAEDkJ,KAFC,UAEhBxI,EAFgB,OAII,YAApBmD,GAJgB,gCAKL7B,EAAgBvB,EAAKC,GALhB,OAKlB2I,EALkB,iCAMW,YAApBxF,GANS,kCAOLzB,EAAgB3B,EAAKC,GAPhB,QAOlB2I,EAPkB,kCAQW,cAApBxF,GARS,kCASLxB,EAAkBT,EAAanB,EAAKC,GAT/B,QASlB2I,EATkB,kCAUW,cAApBxF,GAVS,kCAWLvB,EAAkBV,EAAanB,EAAKC,GAX/B,QAWlB2I,EAXkB,eAelBzF,GADEyF,EACiBA,EAAI,SAAG,GAAM,IAAK,OAElB,oCAjBD,4CAAH,qDAqBbC,GAAe,uCAAG,8BAAAtJ,EAAA,6DACtBgD,GAAa,GADS,SAGHkG,KAHG,UAGlBxI,EAHkB,OAME,YAApBmD,GANkB,iCAOJrD,EAAQC,EAAKC,GAPT,OAOpBY,EAPoB,kCAQS,YAApBuC,GARW,kCASJpC,EAAYhB,EAAKC,GATb,QASpBY,EAToB,kCAUS,cAApBuC,GAVW,kCAWJlC,EAAUC,EAAanB,EAAKC,GAXxB,QAWpBY,EAXoB,kCAYS,cAApBuC,GAZW,kCAaJ/B,EAAcF,EAAanB,EAAKC,GAb5B,QAapBY,EAboB,eAetBC,QAAQC,IAAIF,GACZ0B,GAAa,GAhBS,4CAAH,qDAmBfuG,GAAK,uCAAG,sBAAAvJ,EAAA,sEACNX,EAAQmK,eAAeC,MAAK,SAAUC,GAC1CrF,GAAeqF,EAAKC,IAAI,eACxBC,QAHU,2CAAH,qDAOLA,GAAW,uCAAG,gCAAA5J,EAAA,0DACdL,OAAOC,SADO,iCAGRsI,EAAU,CACdC,MAAO,cACPG,QAAS3I,OAAOC,SAASyB,iBALb,SAOShC,EAAQkJ,QAAQsB,QAAQC,iBAC7C5B,GARY,cAOR6B,EAPQ,gBAUc1K,EAAQkJ,QAAQsB,QAAQG,iBAClD9B,GAXY,OAUR+B,EAVQ,OAadF,EAASG,QAAQ,CACfvD,KAAM,MACNoC,cAAe,MACfE,QAASgB,EAAchB,UAEzBvF,GAAgBqG,GAlBF,kDAoBdxI,QAAQC,IAAI,QAAZ,MApBc,0DAAH,qDAoCX2I,GAAuB,WAC3B,IAAIC,EAZa,WACjB,IAAIC,GAAa,EACbC,EAAkBpH,EAAQ,GAM9B,OALAA,EAAQtC,KAAI,SAACC,GACPA,IAAMyJ,IACRD,GAAa,MAGVA,EAIYA,GAIfvG,GAFgB,QAAhBlC,EACEwI,EACiB,UAEA,UAGjBA,EACiB,YAEA,cAiBzB,OAZAG,qBAAU,WACRX,OACC,IAEHW,qBAAU,WACRnB,OACC,CAAC9E,KAOF,gCACGF,GACC,6BACE,eAACoG,EAAA,EAAD,CAAQC,QAAS,kBAAMlB,MAAvB,iBACGnF,SADH,IACGA,QADH,EACGA,GAAagC,UAAU,EAAG,IAD7B,aACqChC,SADrC,IACqCA,QADrC,EACqCA,GAAagC,UAAU,GAAI,IAAK,SAIvE,cAACoE,EAAA,EAAD,CAAQC,QAAS,kBAAMlB,MAAvB,qBAGF,6CACA,cAACmB,EAAA,EAAD,CAASpG,WAAYA,GAAYqG,kBAAgB,EAAjD,SAlUU,CAAC,UAAW,UAAW,QAmUxB/J,KAAI,SAACgK,GAAD,OACT,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UAAYF,KADHA,QAKC,IAAftG,IACC,qCACG,IACD,uBACA,uCACA,eAACyG,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,6BACA,cAACC,EAAA,GAAD,GACEtK,MAAM,QACNuK,MAAO,CAAEC,MAAO,KAChBP,MAAM,kBAHR,sBAIShJ,GAJT,0BAKY,SAAC6C,GACTrB,EAAeqB,EAAEE,OAAOhE,OACxBsH,QAPJ,yBAUGxE,GAAa7C,KAAI,SAAC4H,GACjB,IAAQO,EAAwBP,EAAxBO,cAAepC,EAAS6B,EAAT7B,KAEvB,OACE,eAACyE,EAAA,EAAD,CAA8BzK,MAAOoI,EAArC,UACGpC,EADH,MACYoC,IADGA,OAdrB,OAqBF,uBACA,wDACA,uBAAO1D,KAAK,OAAOgG,SAAU,SAAC5G,GAAD,OAAOD,GAAWC,MAC/C,uBACA,cAAC6G,EAAA,EAAD,CACE,aAAW,iBACX3K,MAAO4C,GACP8H,SAAU,SAAC5G,GACTjB,GAAYiB,EAAEE,OAAOhE,OACrB6G,GAAW/C,EAAEE,OAAOhE,QAEtB4K,QAAS,SAAC9G,GACRjB,GAAYiB,EAAEE,OAAOhE,OACrB6G,GAAW/C,EAAEE,OAAOhE,QAEtB6C,aAAW,EACXgI,QAAS,EACTC,YAAY,+CACZP,MAAO,CAAEC,MAAO,IAAK,YAAa,WAEpC,gFACC9H,IAAY,6BAAKA,KAClB,uBACA,cAACmH,EAAA,EAAD,CACEkB,SAA0B,KAAhB9J,GAAsByB,GAAW,EAAI,EAE/CoH,QAAS,WACP1C,KACAoC,KACAxB,MAEFgD,QAAQ,YARV,kBAYA,uBACA,uBACA,cAACnB,EAAA,EAAD,CAAQmB,QAAQ,YAAYlB,QAAS,kBAAMlI,EAAaX,IAAxD,8BAKY,IAAf0C,IACC,eAACsH,EAAA,EAAD,CACEC,UAAU,SACVC,eAAe,SACfC,WAAW,SACXC,QAAS,EAJX,UAME,oDAA4B,IAC5B,cAACC,EAAA,EAAD,CAAgBC,GAAI,CAAEf,MAAO,KAAOgB,UAAWC,IAA/C,SACE,eAACC,EAAA,EAAD,CAAOH,GAAI,CAAEf,MAAO,KAAO,aAAW,eAAtC,UACE,cAACmB,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWC,MAAM,OAAjB,qBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,OAAjB,oBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,gBAGrB,cAACC,EAAA,EAAD,UACGjM,EAAIG,KAAI,SAAC0H,EAASqE,GAAV,OACP,eAACJ,EAAA,EAAD,CAEEL,GAAI,CAAE,mCAAoC,CAAEU,OAAQ,IAFtD,UAIE,cAACJ,EAAA,EAAD,CAAWC,MAAM,OAAjB,SAAyBnE,IACzB,cAACkE,EAAA,EAAD,CAAWC,MAAM,OAAjB,SACGvJ,EAAQyJ,GAAR,SAAiB,GAAM,MAE1B,cAACH,EAAA,EAAD,CAAWC,MAAM,SAAjB,SACE,eAACjC,EAAA,EAAD,CAAQC,QAAS,kBA/Qb,SAACkC,GACvB,IAAME,EAASpM,EAAI8F,QAAO,SAACQ,EAAI+F,GAC7B,OAAOA,IAAQH,KAEXI,EAAa7J,EAAQqD,QAAO,SAACQ,EAAI+F,GACrC,OAAOA,IAAQH,KAGjB1J,EAAO4J,GACP1J,EAAW4J,GAsQ8BC,CAAgBL,IAAvC,UACG,IADH,gBARGA,QAgBX,cAACL,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAWC,MAAM,OAAjB,+BACqBhM,EAAIsF,UAEzB,eAACyG,EAAA,EAAD,CAAWC,MAAM,OAAjB,2BACiB5D,kBAMzB,uBACA,cAACoD,EAAA,EAAD,CAAgBC,GAAI,CAAEf,MAAO,KAAOgB,UAAWC,IAA/C,SACE,cAACC,EAAA,EAAD,CAAOH,GAAI,CAAEf,MAAO,KAAO,aAAW,eAAtC,SACE,eAACuB,EAAA,EAAD,WACE,eAACH,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAWC,MAAM,OAAjB,wCAC8BhM,EAAIsF,UAElC,eAACyG,EAAA,EAAD,CAAWC,MAAM,OAAjB,gDACsC5D,KAAe,IAEjDpF,GAAaqF,MAAK,SAACrE,GAAD,OAAOA,EAAEsE,gBAAkBnH,KAC1CqL,YARM,KAYf,eAACV,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWC,MAAM,OAAjB,8CAGA,eAACD,EAAA,EAAD,CAAWC,MAAM,OAAjB,iCACuBxI,GAEnBR,GAAaqF,MAAK,SAACrE,GAAD,OAAOA,EAAEsE,gBAAkBnH,KAC1CqL,YARM,KAYf,eAACV,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAWC,MAAM,OAAjB,yCAC+B9I,MAE/B,eAAC6I,EAAA,EAAD,CAAWC,MAAM,OAAjB,8BACoBhJ,GAAa,GAAGwF,QAAhB,SAA0B,GAAM,IADpD,YAJa,YAWrB,uBACClF,IAAgB,6BAAKA,KACtB,uBACA,eAAC6H,EAAA,EAAD,CACEC,UAAU,MACVC,eAAe,SACfC,WAAW,SACXC,QAAS,EAJX,UAME,cAACxB,EAAA,EAAD,CAAQC,QAAS,kBAAMzC,MAAY2D,QAAQ,YAA3C,kBAIA,cAACnB,EAAA,EAAD,CACEkB,SAAU3H,GAAe,EAAI,EAC7B0G,QAAS,kBAAM1C,MACf4D,QAAQ,YAHV,wBAUU,IAAfrH,IACC,qCACE,cAACkG,EAAA,EAAD,CACEkB,SAAU3I,EAAY,EAAI,EAC1B0H,QAAS,kBAAMnB,MACfqC,QAAQ,YAHV,SAKG5I,EAAY,aAAe,qBAE9B,uBACA,uBACA,cAAC6I,EAAA,EAAD,CACEC,UAAU,MACVC,eAAe,SACfC,WAAW,SACXC,QAAS,EAJX,SAME,cAACxB,EAAA,EAAD,CAAQC,QAAS,kBAAMzC,MAAY2D,QAAQ,YAA3C,2BCpjBGuB,OARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,O,gCCGNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.75402f7e.chunk.js","sourcesContent":["const Moralis = require(\"moralis\");\r\n\r\nMoralis.initialize(\"91M5UMZcKjdRbjbS8FMlIAD3xk39cQq2K0C6adPa\");\r\n\r\nMoralis.serverURL = \"https://x9otfdizv1zu.moralisweb3.com:2053/server\";\r\n\r\nexport default Moralis;\r\n","const Web3 = require(\"web3\");\n\nlet web3;\n\nif (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n  //we are in the browser and metamask is running\n  web3 = new Web3(Web3.givenProvider);\n} else {\n  //we are on the server or the user don't have metamask\n\n  window.alert(\"Please Install Metamask\");\n}\n\nexport default web3;\n","import web3 from \"./web3\";\r\nimport MultiSender from \"./multiSender.json\";\r\n\r\nexport const MultiSenderAddress = \"0x3457EbBE22064f0aC5a1C46Fc00b326fB7013cA2\";\r\n\r\nasync function Interface() {\r\n  return new web3.eth.Contract(MultiSender.abi, MultiSenderAddress);\r\n}\r\n\r\nexport default Interface;\r\n","import Web3 from \"./web3\";\r\nimport ERC20 from \"./ERC20.json\";\r\n\r\nasync function Interface(ERC20Address) {\r\n  let web3 = await Web3();\r\n  return new web3.eth.Contract(ERC20.abi, ERC20Address);\r\n}\r\n\r\nexport default Interface;\r\n","import web3 from \"./web3\";\r\nimport multiSenderInterface, {\r\n  MultiSenderAddress,\r\n} from \"./multiSenderInterface\";\r\nimport erc20Interface from \"./ERC20Interface\";\r\n\r\nexport const Ethsend = async (_to, amount) => {\r\n  try {\r\n    let value = 10000000000000000;\r\n    amount.map((i) => (value = value + Number(i)));\r\n    let instance = await multiSenderInterface();\r\n    let receipt = await instance.methods\r\n      .sendEth(_to, amount[0])\r\n      .send({ from: window.ethereum.selectedAddress, value: value });\r\n\r\n    return receipt;\r\n  } catch (error) {\r\n    console.log(error, \"Ethsend\");\r\n  }\r\n};\r\n\r\nexport const sendEthBulk = async (_to, amount) => {\r\n  try {\r\n    let value = 10000000000000000;\r\n    amount.map((i) => (value = value + Number(i)));\r\n    let instance = await multiSenderInterface();\r\n    let receipt = await instance.methods\r\n      .bulksendEth(_to, amount)\r\n      .send({ from: window.ethereum.selectedAddress, value: value });\r\n\r\n    return receipt;\r\n  } catch (error) {\r\n    console.log(error, \"sendEthBulk\");\r\n  }\r\n};\r\n\r\nexport const TokenSend = async (tokenToSend, _to, amount) => {\r\n  try {\r\n    let value = 10000000000000000;\r\n    let instance = await multiSenderInterface();\r\n    let receipt = await instance.methods\r\n      .sendToken(tokenToSend, _to, amount[0])\r\n      .send({ from: window.ethereum.selectedAddress, value: value });\r\n\r\n    return receipt;\r\n  } catch (error) {\r\n    console.log(error, \"TokenSend\");\r\n  }\r\n};\r\n\r\nexport const sendTokenbulk = async (tokenToSend, _to, amount) => {\r\n  try {\r\n    let value = 10000000000000000;\r\n    let instance = await multiSenderInterface();\r\n    let receipt = await instance.methods\r\n      .bulksendToken(tokenToSend, _to, amount)\r\n      .send({ from: window.ethereum.selectedAddress, value: value });\r\n\r\n    return receipt;\r\n  } catch (error) {\r\n    console.log(error, \"sendTokenbulk\");\r\n  }\r\n};\r\n\r\nexport const estimateEthSend = async (_to, amount) => {\r\n  try {\r\n    let value = 10000000000000000;\r\n    amount.map((i) => (value = value + Number(i)));\r\n    let instance = await multiSenderInterface();\r\n    let gas = await web3.eth.getGasPrice();\r\n    let receipt = await instance.methods\r\n      .sendEth(_to, amount[0])\r\n      .estimateGas({ from: window.ethereum.selectedAddress, value: value });\r\n\r\n    console.log(receipt, gas, \"gas\");\r\n\r\n    return receipt * gas + 0.01;\r\n  } catch (error) {\r\n    console.log(error, \"estimateEthSend\");\r\n  }\r\n};\r\n\r\nexport const estimateEthBulk = async (_to, amount) => {\r\n  try {\r\n    let value = 10000000000000000;\r\n    amount.map((i) => (value = value + Number(i)));\r\n    let instance = await multiSenderInterface();\r\n    let gas = await web3.eth.getGasPrice();\r\n    let receipt = await instance.methods\r\n      .bulksendEth(_to, amount)\r\n      .estimateGas({ from: window.ethereum.selectedAddress, value: value });\r\n\r\n    console.log(receipt, gas, \"gas\");\r\n\r\n    return receipt * gas + 0.01;\r\n  } catch (error) {\r\n    console.log(error, \"estimateEthBulk\");\r\n  }\r\n};\r\n\r\nexport const estimateTokenSend = async (tokenToSend, _to, amount) => {\r\n  try {\r\n    let value = 10000000000000000;\r\n    let instance = await multiSenderInterface();\r\n    let gas = await web3.eth.getGasPrice();\r\n    let receipt = await instance.methods\r\n      .sendToken(tokenToSend, _to, amount[0])\r\n      .estimateGas({ from: window.ethereum.selectedAddress, value: value });\r\n\r\n    console.log(receipt, gas, \"gas\");\r\n\r\n    return receipt * gas + 0.01;\r\n  } catch (error) {\r\n    console.log(error, \"estimateTokenSend\");\r\n  }\r\n};\r\n\r\nexport const estimateTokenBulk = async (tokenToSend, _to, amount) => {\r\n  try {\r\n    console.log(tokenToSend, _to, amount);\r\n    let value = 10000000000000000;\r\n    let instance = await multiSenderInterface();\r\n    let gas = await web3.eth.getGasPrice();\r\n    let receipt = await instance.methods\r\n      .bulksendToken(tokenToSend, _to, amount)\r\n      .estimateGas({ from: window.ethereum.selectedAddress, value: value });\r\n\r\n    console.log(receipt, gas, \"gas\");\r\n\r\n    return receipt * gas + 0.01;\r\n  } catch (error) {\r\n    console.log(error, \"estimateTokenBulk\");\r\n  }\r\n};\r\n\r\nexport const AproveSender = async () => {\r\n  try {\r\n    let instance = await erc20Interface();\r\n    let amount = web3.utils.toWei(\"10000000\");\r\n    let receipt = await instance.methods\r\n      .approve(MultiSenderAddress, amount)\r\n      .send({ from: window.ethereum.selectedAddress });\r\n    return receipt;\r\n  } catch (error) {\r\n    console.log(error, \"AproveSender\");\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Moralis from \"../moralis\";\r\nimport {\r\n  TextareaAutosize,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Button,\r\n  Select,\r\n  MenuItem,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Stack,\r\n  InputLabel,\r\n  FormControl,\r\n} from \"@mui/material\";\r\nimport * as XLSX from \"xlsx\";\r\nimport {\r\n  sendEthBulk,\r\n  Ethsend,\r\n  sendTokenbulk,\r\n  TokenSend,\r\n  estimateEthBulk,\r\n  estimateEthSend,\r\n  estimateTokenBulk,\r\n  estimateTokenSend,\r\n  AproveSender,\r\n} from \"../blockchain/functions.js\";\r\nconst { toChecksumAddress } = require(\"ethereum-checksum-address\");\r\n\r\nfunction BatchBNB() {\r\n  const [isSending, setIsSending] = useState(false);\r\n  const [_to, set_to] = useState([]);\r\n  const [_amount, set_amount] = useState([]);\r\n  const [tokenToSend, setTokenToSend] = useState(\"\");\r\n  const [errorMSG, setErrorMsg] = useState(\"\");\r\n  const [textArea, setTextArea] = useState();\r\n  const [userBalances, setUserBalances] = useState([]);\r\n  const [transactionCost, setTransactionCost] = useState();\r\n  const [transactionType, setTransactionType] = useState();\r\n  const [balanceError, setBalanceError] = useState(\"\");\r\n  const [selectedTokenBalance, setSelectedTokenBalance] = useState(\"\");\r\n  const [isAllowed, setIsAllowed] = useState(false);\r\n  const [userAddress, setUserAddress] = useState(\"\");\r\n  const steps = [\"Prepare\", \"Confirm\", \"Send\"];\r\n  const [activeStep, setActiveStep] = useState(0);\r\n\r\n  const processData = (dataString) => {\r\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\r\n    const headers = dataStringLines[0].split(\r\n      /,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/\r\n    );\r\n\r\n    const list = [];\r\n    for (let i = 1; i < dataStringLines.length; i++) {\r\n      const row = dataStringLines[i].split(\r\n        /,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/\r\n      );\r\n      if (headers && row.length === headers.length) {\r\n        const obj = {};\r\n        for (let j = 0; j < headers.length; j++) {\r\n          let d = row[j];\r\n          if (d.length > 0) {\r\n            if (d[0] === '\"') d = d.substring(1, d.length - 1);\r\n            if (d[d.length - 1] === '\"') d = d.substring(d.length - 2, 1);\r\n          }\r\n          if (headers[j]) {\r\n            obj[headers[j]] = d;\r\n          }\r\n        }\r\n\r\n        if (Object.values(obj).filter((x) => x).length > 0) {\r\n          list.push(obj);\r\n        }\r\n      }\r\n    }\r\n\r\n    const columns = headers.map((c) => ({\r\n      name: c,\r\n      selector: c,\r\n    }));\r\n    let addresses = [];\r\n    let amounts = [];\r\n    let result = [];\r\n    list.map((el) => {\r\n      result.push(el.Address);\r\n      result.push(el.Amount + \"\\n\");\r\n      addresses.push(el.Address);\r\n      amounts.push(el.Amount);\r\n    });\r\n\r\n    setTextArea(result.join());\r\n    checkInputs(result);\r\n\r\n    set_amount(amounts);\r\n\r\n    set_to(addresses);\r\n  };\r\n\r\n  function handleFile(e) {\r\n    const file = e.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.onload = (evt) => {\r\n      /* Parse data */\r\n      const bstr = evt.target.result;\r\n      const wb = XLSX.read(bstr, { type: \"binary\" });\r\n      /* Get first worksheet */\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n      processData(data);\r\n    };\r\n    reader.readAsBinaryString(file);\r\n  }\r\n\r\n  const handleText = (text) => {\r\n    let result = text.split(\" \").join(\"\").split(\"\\n\").join(\"\").split(\",\");\r\n    checkInputs(result);\r\n  };\r\n\r\n  const checkInputs = (result) => {\r\n    let addresses = [];\r\n    let amounts = [];\r\n    let errormsg = \"\";\r\n    let line = 0;\r\n    for (var i = 0; i < result.length; i += 2) {\r\n      line++;\r\n      addresses.push(result[i]);\r\n      result[i + 1] && amounts.push((result[i + 1] * 10 ** 18).toString());\r\n      let checkAddress;\r\n      try {\r\n        checkAddress = toChecksumAddress(result[i]);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n\r\n      if (!checkAddress) {\r\n        errormsg = `line ${line}: ${result[i]} is a invalid wallet address and wrong amount. E.g:address,number`;\r\n      } else if (!Number(result[i + 1])) {\r\n        errormsg = `line ${line}: ${result[i + 1]}  is a invalid wrong amount`;\r\n      }\r\n    }\r\n    setErrorMsg(errormsg);\r\n    set_to(addresses);\r\n    set_amount(amounts);\r\n  };\r\n\r\n  const nextStep = () => {\r\n    setActiveStep(activeStep + 1);\r\n  };\r\n\r\n  const prevStep = () => {\r\n    setActiveStep(activeStep - 1);\r\n  };\r\n\r\n  const checkAllowance = async () => {\r\n    if (tokenToSend !== \"BNB\") {\r\n      try {\r\n        const options = {\r\n          chain: \"bsc testnet\",\r\n          owner_address: window.ethereum.selectedAddress,\r\n          spender_address: \"0x3457EbBE22064f0aC5a1C46Fc00b326fB7013cA2\",\r\n          address: tokenToSend,\r\n        };\r\n        const allowance = await Moralis.Web3API.token.getTokenAllowance(\r\n          options\r\n        );\r\n        if (Number(allowance.allowance) < 500000 * 10 ** 18) {\r\n          setIsAllowed(false);\r\n        } else {\r\n          setIsAllowed(true);\r\n        }\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkBalanceForTransfer = async () => {\r\n    let total = totalAmount();\r\n\r\n    let token = await userBalances.find((e) => e.token_address === tokenToSend);\r\n    let decimals = token.decimals || 18;\r\n    let balance = token.balance / 10 ** decimals;\r\n    setSelectedTokenBalance(balance);\r\n\r\n    if (total > balance) {\r\n      setBalanceError(\"Not Enough Balance to Transfer\");\r\n    } else if (!transactionCost) {\r\n      setBalanceError(\r\n        \"Can't calculate transaction cost, transaction may fail, please verify if the token is approved for transfer\"\r\n      );\r\n    } else {\r\n      setBalanceError(\"\");\r\n    }\r\n\r\n    return balance;\r\n  };\r\n\r\n  const removeRecipient = (index) => {\r\n    const new_to = _to.filter((el, key) => {\r\n      return key !== index;\r\n    });\r\n    const new_amount = _amount.filter((el, key) => {\r\n      return key !== index;\r\n    });\r\n\r\n    set_to(new_to);\r\n    set_amount(new_amount);\r\n  };\r\n\r\n  const totalAmount = () => {\r\n    let total = 0;\r\n    _amount.map((el) => (total = total + Number(el) / 10 ** 18));\r\n    return total;\r\n  };\r\n\r\n  const checkDecimals = async () => {\r\n    try {\r\n      let token = await userBalances.find(\r\n        (e) => e.token_address === tokenToSend\r\n      );\r\n      let decimals = token.decimals || 18;\r\n\r\n      if (decimals === 18) {\r\n        return _amount;\r\n      } else {\r\n        let amount = [];\r\n        _amount.map((el) => {\r\n          let temp = el / 10 ** 18;\r\n          amount.push((temp * 10 ** decimals).toString());\r\n        });\r\n        return amount;\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const costOperation = async () => {\r\n    let cost;\r\n    let amount = await checkDecimals();\r\n\r\n    if (transactionType === \"sendETH\") {\r\n      cost = await estimateEthSend(_to, amount);\r\n    } else if (transactionType === \"bulkETH\") {\r\n      cost = await estimateEthBulk(_to, amount);\r\n    } else if (transactionType === \"sendToken\") {\r\n      cost = await estimateTokenSend(tokenToSend, _to, amount);\r\n    } else if (transactionType === \"bulkToken\") {\r\n      cost = await estimateTokenBulk(tokenToSend, _to, amount);\r\n    }\r\n\r\n    if (cost) {\r\n      setTransactionCost(cost / 10 ** 18 + \" BNB\");\r\n    } else {\r\n      setTransactionCost(\"can't calculate transaction cost\");\r\n    }\r\n  };\r\n\r\n  const sendTransaction = async () => {\r\n    setIsSending(true);\r\n\r\n    let amount = await checkDecimals();\r\n\r\n    let receipt;\r\n    if (transactionType === \"sendETH\") {\r\n      receipt = await Ethsend(_to, amount);\r\n    } else if (transactionType === \"bulkETH\") {\r\n      receipt = await sendEthBulk(_to, amount);\r\n    } else if (transactionType === \"sendToken\") {\r\n      receipt = await TokenSend(tokenToSend, _to, amount);\r\n    } else if (transactionType === \"bulkToken\") {\r\n      receipt = await sendTokenbulk(tokenToSend, _to, amount);\r\n    }\r\n    console.log(receipt);\r\n    setIsSending(false);\r\n  };\r\n\r\n  const login = async () => {\r\n    await Moralis.authenticate().then(function (user) {\r\n      setUserAddress(user.get(\"ethAddress\"));\r\n      getBalances();\r\n    });\r\n  };\r\n\r\n  const getBalances = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const options = {\r\n          chain: \"bsc testnet\",\r\n          address: window.ethereum.selectedAddress,\r\n        };\r\n        const balances = await Moralis.Web3API.account.getTokenBalances(\r\n          options\r\n        );\r\n        const nativeBalance = await Moralis.Web3API.account.getNativeBalance(\r\n          options\r\n        );\r\n        balances.unshift({\r\n          name: \"BNB\",\r\n          token_address: \"BNB\",\r\n          balance: nativeBalance.balance,\r\n        });\r\n        setUserBalances(balances);\r\n      } catch (error) {\r\n        console.log(\"error\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const sameAmount = () => {\r\n    let sameAmount = true;\r\n    let amountToCompare = _amount[0];\r\n    _amount.map((i) => {\r\n      if (i !== amountToCompare) {\r\n        sameAmount = false;\r\n      }\r\n    });\r\n    return sameAmount;\r\n  };\r\n\r\n  const checkTransactionType = () => {\r\n    let isSameAmount = sameAmount();\r\n\r\n    if (tokenToSend === \"BNB\") {\r\n      if (isSameAmount) {\r\n        setTransactionType(\"sendETH\");\r\n      } else {\r\n        setTransactionType(\"bulkETH\");\r\n      }\r\n    } else {\r\n      if (isSameAmount) {\r\n        setTransactionType(\"sendToken\");\r\n      } else {\r\n        setTransactionType(\"bulkToken\");\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBalances();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    costOperation();\r\n  }, [activeStep]);\r\n\r\n  // useEffect(() => {\r\n  //   checkAllowance();\r\n  // }, [tokenToSend]);\r\n\r\n  return (\r\n    <div>\r\n      {userAddress ? (\r\n        <h4>\r\n          <Button onClick={() => login()}>\r\n            {userAddress?.substring(0, 10)}...{userAddress?.substring(36, 42)}{\" \"}\r\n          </Button>\r\n        </h4>\r\n      ) : (\r\n        <Button onClick={() => login()}> login </Button>\r\n      )}\r\n\r\n      <h2>MultiSender</h2>\r\n      <Stepper activeStep={activeStep} alternativeLabel>\r\n        {steps.map((label) => (\r\n          <Step key={label}>\r\n            <StepLabel>{label}</StepLabel>\r\n          </Step>\r\n        ))}\r\n      </Stepper>\r\n      {activeStep === 0 && (\r\n        <>\r\n          {\" \"}\r\n          <br />\r\n          <h3>Token</h3>\r\n          <FormControl>\r\n            <InputLabel>Select a Token</InputLabel>\r\n            <Select\r\n              value=\"Token\"\r\n              style={{ width: 600 }}\r\n              label=\"Select a Token\"\r\n              value={tokenToSend}\r\n              onChange={(e) => {\r\n                setTokenToSend(e.target.value);\r\n                checkAllowance();\r\n              }}\r\n            >\r\n              {userBalances.map((token) => {\r\n                const { token_address, name } = token;\r\n\r\n                return (\r\n                  <MenuItem key={token_address} value={token_address}>\r\n                    {name} - {token_address}\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n          <br />\r\n          <h3>Addresses with Amounts</h3>\r\n          <input type=\"file\" onChange={(e) => handleFile(e)} />\r\n          <br />\r\n          <TextareaAutosize\r\n            aria-label=\"minimum height\"\r\n            value={textArea}\r\n            onChange={(e) => {\r\n              setTextArea(e.target.value);\r\n              handleText(e.target.value);\r\n            }}\r\n            onPaste={(e) => {\r\n              setTextArea(e.target.value);\r\n              handleText(e.target.value);\r\n            }}\r\n            setTextArea\r\n            minRows={4}\r\n            placeholder=\"Insert Address and Amount separated by comma\"\r\n            style={{ width: 600, \"min-width\": \"200px\" }}\r\n          />\r\n          <h6>The address and amount are separated by commas</h6>\r\n          {errorMSG && <h3>{errorMSG}</h3>}\r\n          <br />\r\n          <Button\r\n            disabled={tokenToSend === \"\" || errorMSG ? 1 : 0}\r\n            // disabled={!isAllowed ? 1 : 0}\r\n            onClick={() => {\r\n              nextStep();\r\n              checkTransactionType();\r\n              checkBalanceForTransfer();\r\n            }}\r\n            variant=\"contained\"\r\n          >\r\n            next\r\n          </Button>\r\n          <br />\r\n          <br />\r\n          <Button variant=\"contained\" onClick={() => AproveSender(tokenToSend)}>\r\n            Aprove Token!\r\n          </Button>\r\n        </>\r\n      )}\r\n      {activeStep === 1 && (\r\n        <Stack\r\n          direction=\"column\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          spacing={1}\r\n        >\r\n          <h3>List of Recipients</h3>{\" \"}\r\n          <TableContainer sx={{ width: 650 }} component={Paper}>\r\n            <Table sx={{ width: 650 }} aria-label=\"simple table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell align=\"left\">Address</TableCell>\r\n                  <TableCell align=\"left\">Amount</TableCell>\r\n                  <TableCell align=\"center\"></TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {_to.map((address, index) => (\r\n                  <TableRow\r\n                    key={index}\r\n                    sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n                  >\r\n                    <TableCell align=\"left\">{address}</TableCell>\r\n                    <TableCell align=\"left\">\r\n                      {_amount[index] / 10 ** 18}\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Button onClick={() => removeRecipient(index)}>\r\n                        {\" \"}\r\n                        remove\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell align=\"left\">\r\n                    Total Recipients: {_to.length}\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    Total Amount: {totalAmount()}\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n            </Table>\r\n          </TableContainer>\r\n          <br />\r\n          <TableContainer sx={{ width: 650 }} component={Paper}>\r\n            <Table sx={{ width: 650 }} aria-label=\"simple table\">\r\n              <TableBody>\r\n                <TableRow key={\"a\"}>\r\n                  <TableCell align=\"left\">\r\n                    Total Number of Addresses: {_to.length}\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    Total Number of Tokens to be Sent: {totalAmount()}{\" \"}\r\n                    {\r\n                      userBalances.find((e) => e.token_address === tokenToSend)\r\n                        .symbol\r\n                    }\r\n                  </TableCell>\r\n                </TableRow>\r\n                <TableRow key={\"b\"}>\r\n                  <TableCell align=\"left\">\r\n                    Number of Transactions Needed: 1\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    Your Token Balance: {selectedTokenBalance}\r\n                    {\r\n                      userBalances.find((e) => e.token_address === tokenToSend)\r\n                        .symbol\r\n                    }\r\n                  </TableCell>\r\n                </TableRow>\r\n                <TableRow key={\"c\"}>\r\n                  <TableCell align=\"left\">\r\n                    Approximate Cost Operation: {transactionCost}\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    Your BNB Balance {userBalances[0].balance / 10 ** 18} BNB\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <br />\r\n          {balanceError && <h3>{balanceError}</h3>}\r\n          <br />\r\n          <Stack\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Button onClick={() => prevStep()} variant=\"contained\">\r\n              prev\r\n            </Button>\r\n\r\n            <Button\r\n              disabled={balanceError ? 1 : 0}\r\n              onClick={() => nextStep()}\r\n              variant=\"contained\"\r\n            >\r\n              next\r\n            </Button>\r\n          </Stack>\r\n        </Stack>\r\n      )}\r\n      {activeStep === 2 && (\r\n        <>\r\n          <Button\r\n            disabled={isSending ? 1 : 0}\r\n            onClick={() => sendTransaction()}\r\n            variant=\"contained\"\r\n          >\r\n            {isSending ? \"Sending...\" : \"Send Transaction\"}\r\n          </Button>\r\n          <br />\r\n          <br />\r\n          <Stack\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Button onClick={() => prevStep()} variant=\"contained\">\r\n              prev\r\n            </Button>\r\n          </Stack>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BatchBNB;\r\n","import \"./App.css\";\r\nimport MultiSender from \"./pages\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <MultiSender />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport \"@fontsource/roboto/300.css\";\r\nimport \"@fontsource/roboto/400.css\";\r\nimport \"@fontsource/roboto/500.css\";\r\nimport \"@fontsource/roboto/700.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}