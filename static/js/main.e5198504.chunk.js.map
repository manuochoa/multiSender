{"version":3,"sources":["logo.svg","moralis/index.js","blockchain/web3.js","blockchain/MultiSenderInterface.js","blockchain/ERC20Interface.js","blockchain/functions.js","pages/batchBNB.js","pages/home.js","App.js","reportWebVitals.js","index.js"],"names":["Moralis","require","initialize","serverURL","web3","Web3","window","ethereum","givenProvider","alert","senderAddress","Interface","eth","Contract","multiSendABI","abi","_address","ERC20ABI","sendEthBulk","_to","_amount","a","value","map","el","Number","senderInterface","instance","console","log","methods","bulksendEth","send","toString","from","selectedAddress","receipt","estimateEthBulk","getGasPrice","gasPrice","estimateGas","Ethsend","length","sendEth","estimateEthSend","sendTokenbulk","_tokenAddress","bulksendToken","estimateTokenBulk","TokenSend","sendToken","estimateTokenSend","AproveSender","utils","toWei","ERC20Interface","approve","toChecksumAddress","checkAddressChecksum","BatchBNB","useState","isSending","setIsSending","set_to","set_amount","tokenToSend","setTokenToSend","errorMSG","setErrorMsg","textArea","setTextArea","userBalances","setUserBalances","transactionCost","setTransactionCost","transactionType","setTransactionType","balanceError","setBalanceError","selectedTokenBalance","setSelectedTokenBalance","setIsAllowed","activeStep","setActiveStep","handleFile","e","file","target","files","reader","FileReader","onload","evt","bstr","result","wb","XLSX","type","wsname","SheetNames","ws","Sheets","dataString","dataStringLines","split","headers","list","i","row","obj","j","d","substring","Object","values","filter","x","push","columns","c","name","selector","addresses","amounts","Address","Amount","join","checkInputs","processData","sheet_to_csv","header","readAsBinaryString","handleText","text","errormsg","line","checkAddress","error","nextStep","prevStep","checkAllowance","options","chain","owner_address","spender_address","address","Web3API","token","getTokenAllowance","allowance","checkBalanceForTransfer","total","totalAmount","find","token_address","decimals","balance","costOperation","cost","sendTransaction","login","authenticate","then","user","get","getBalances","account","getTokenBalances","balances","getNativeBalance","nativeBalance","unshift","checkTransactionType","isSameAmount","sameAmount","amountToCompare","useEffect","Button","onClick","Stepper","alternativeLabel","label","Step","StepLabel","Select","labelId","id","style","width","MenuItem","onChange","TextareaAutosize","onPaste","minRows","placeholder","disabled","variant","Stack","direction","justifyContent","alignItems","spacing","TableContainer","sx","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","index","border","new_to","key","new_amount","removeRecipient","symbol","Home","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5198504.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const Moralis = require(\"moralis\");\r\n\r\nMoralis.initialize(\"91M5UMZcKjdRbjbS8FMlIAD3xk39cQq2K0C6adPa\");\r\n\r\nMoralis.serverURL = \"https://x9otfdizv1zu.moralisweb3.com:2053/server\";\r\n\r\nexport default Moralis;\r\n","const Web3 = require(\"web3\");\r\n\r\nlet web3;\r\n\r\nif (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\r\n  //we are in the browser and metamask is running\r\n  web3 = new Web3(Web3.givenProvider);\r\n} else {\r\n  //we are on the server or the user don't have metamask\r\n  window.alert(\"Please Install Metamask\");\r\n}\r\n\r\nexport default web3;\r\n","import web3 from \"./web3\";\r\nimport multiSendABI from \"./abi.json\";\r\n\r\nexport const senderAddress = \"0x3457EbBE22064f0aC5a1C46Fc00b326fB7013cA2\";\r\n\r\nfunction Interface() {\r\n  return new web3.eth.Contract(multiSendABI.abi, senderAddress);\r\n}\r\n\r\nexport default Interface;\r\n","import web3 from \"./web3\";\r\nimport ERC20ABI from \"./erc20Abi.json\";\r\n\r\nfunction Interface(_address) {\r\n  return new web3.eth.Contract(ERC20ABI.abi, _address);\r\n}\r\n\r\nexport default Interface;\r\n","import web3 from \"./web3\";\r\nimport senderInterface, { senderAddress } from \"./MultiSenderInterface\";\r\nimport ERC20Interface from \"./ERC20Interface\";\r\n\r\nexport const sendEthBulk = async (_to, _amount) => {\r\n  try {\r\n    let value = 10000000000000000;\r\n    _amount.map((el) => {\r\n      value = value + Number(el);\r\n    });\r\n    let instance = await senderInterface();\r\n    console.log(value, _to, _amount);\r\n    let receipt = await instance.methods\r\n      .bulksendEth(_to, _amount)\r\n      .send({ value: value.toString(), from: window.ethereum.selectedAddress });\r\n\r\n    console.log(receipt);\r\n    return receipt;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const estimateEthBulk = async (_to, _amount) => {\r\n  try {\r\n    let value = 10000000000000000;\r\n    _amount.map((el) => {\r\n      value = value + Number(el);\r\n    });\r\n    let instance = await senderInterface();\r\n    let gasPrice = await web3.eth.getGasPrice();\r\n    console.log(value, _to, _amount);\r\n    let receipt = await instance.methods.bulksendEth(_to, _amount).estimateGas({\r\n      value: value.toString(),\r\n      from: window.ethereum.selectedAddress,\r\n    });\r\n\r\n    return receipt * gasPrice;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const Ethsend = async (_to, _amount) => {\r\n  try {\r\n    let value = Number(_amount[0]) * _to.length + 10000000000000000;\r\n    console.log(_to, _amount, value);\r\n    let instance = await senderInterface();\r\n    let receipt = await instance.methods\r\n      .sendEth(_to, _amount[0])\r\n      .send({ value: value.toString(), from: window.ethereum.selectedAddress });\r\n\r\n    console.log(receipt);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const estimateEthSend = async (_to, _amount) => {\r\n  try {\r\n    let value = Number(_amount[0]) * _to.length + 10000000000000000;\r\n    let instance = await senderInterface();\r\n    let gasPrice = await web3.eth.getGasPrice();\r\n    console.log(_to, _amount, value);\r\n    let receipt = await instance.methods.sendEth(_to, _amount[0]).estimateGas({\r\n      value: value.toString(),\r\n      from: window.ethereum.selectedAddress,\r\n    });\r\n\r\n    return receipt * gasPrice;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const sendTokenbulk = async (_tokenAddress, _to, _amount) => {\r\n  try {\r\n    let value = 10000000000000000;\r\n    let instance = await senderInterface();\r\n    console.log(_tokenAddress, _to, _amount);\r\n    let receipt = await instance.methods\r\n      .bulksendToken(_tokenAddress, _to, _amount)\r\n      .send({ value: value.toString(), from: window.ethereum.selectedAddress });\r\n\r\n    console.log(receipt);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const estimateTokenBulk = async (_tokenAddress, _to, _amount) => {\r\n  try {\r\n    let value = 10000000000000000;\r\n    let instance = await senderInterface();\r\n    let gasPrice = await web3.eth.getGasPrice();\r\n    console.log(_tokenAddress, _to, _amount);\r\n    let receipt = await instance.methods\r\n      .bulksendToken(_tokenAddress, _to, _amount)\r\n      .estimateGas({\r\n        value: value.toString(),\r\n        from: window.ethereum.selectedAddress,\r\n      });\r\n\r\n    return receipt * gasPrice;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const TokenSend = async (_tokenAddress, _to, _amount) => {\r\n  try {\r\n    let value = 10000000000000000;\r\n    let instance = await senderInterface();\r\n    console.log(_tokenAddress, _to, _amount[0]);\r\n    let receipt = await instance.methods\r\n      .sendToken(_tokenAddress, _to, _amount[0])\r\n      .send({ value: value.toString(), from: window.ethereum.selectedAddress });\r\n\r\n    console.log(receipt);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const estimateTokenSend = async (_tokenAddress, _to, _amount) => {\r\n  try {\r\n    let value = 10000000000000000;\r\n    let instance = await senderInterface();\r\n    let gasPrice = await web3.eth.getGasPrice();\r\n    console.log(_tokenAddress, _to, _amount[0]);\r\n    let receipt = await instance.methods\r\n      .sendToken(_tokenAddress, _to, _amount[0])\r\n      .estimateGas({\r\n        value: value.toString(),\r\n        from: window.ethereum.selectedAddress,\r\n      });\r\n\r\n    return receipt * gasPrice;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const AproveSender = async (_tokenAddress) => {\r\n  try {\r\n    let _amount = web3.utils.toWei(\"1000000\");\r\n    console.log(_amount);\r\n\r\n    let instance = await ERC20Interface(_tokenAddress);\r\n    let receipt = await instance.methods.approve(senderAddress, _amount).send({\r\n      from: window.ethereum.selectedAddress,\r\n    });\r\n\r\n    console.log(receipt);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Moralis from \"../moralis\";\r\nimport {\r\n  TextareaAutosize,\r\n  Stepper,\r\n  Step,\r\n  StepLabel,\r\n  Button,\r\n  Select,\r\n  MenuItem,\r\n} from \"@mui/material\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableFooter,\r\n  TableRow,\r\n  Paper,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport * as XLSX from \"xlsx\";\r\nimport {\r\n  sendEthBulk,\r\n  Ethsend,\r\n  sendTokenbulk,\r\n  TokenSend,\r\n  estimateEthBulk,\r\n  estimateEthSend,\r\n  estimateTokenBulk,\r\n  estimateTokenSend,\r\n  AproveSender,\r\n} from \"../blockchain/functions\";\r\nconst {\r\n  toChecksumAddress,\r\n  checkAddressChecksum,\r\n} = require(\"ethereum-checksum-address\");\r\n\r\nfunction BatchBNB() {\r\n  const [isSending, setIsSending] = useState(false);\r\n  const [_to, set_to] = useState([]);\r\n  const [_amount, set_amount] = useState([]);\r\n  const [tokenToSend, setTokenToSend] = useState(\"\");\r\n  const [errorMSG, setErrorMsg] = useState(\"\");\r\n  const [textArea, setTextArea] = useState();\r\n  const [userBalances, setUserBalances] = useState([]);\r\n  const [transactionCost, setTransactionCost] = useState();\r\n  const [transactionType, setTransactionType] = useState();\r\n  const [balanceError, setBalanceError] = useState(\"\");\r\n  const [selectedTokenBalance, setSelectedTokenBalance] = useState(\"\");\r\n  const [isAllowed, setIsAllowed] = useState(false);\r\n  const steps = [\"Prepare\", \"Confirm\", \"Send\"];\r\n  const [activeStep, setActiveStep] = useState(0);\r\n\r\n  const processData = (dataString) => {\r\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\r\n    const headers = dataStringLines[0].split(\r\n      /,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/\r\n    );\r\n\r\n    const list = [];\r\n    for (let i = 1; i < dataStringLines.length; i++) {\r\n      const row = dataStringLines[i].split(\r\n        /,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/\r\n      );\r\n      if (headers && row.length === headers.length) {\r\n        const obj = {};\r\n        for (let j = 0; j < headers.length; j++) {\r\n          let d = row[j];\r\n          if (d.length > 0) {\r\n            if (d[0] === '\"') d = d.substring(1, d.length - 1);\r\n            if (d[d.length - 1] === '\"') d = d.substring(d.length - 2, 1);\r\n          }\r\n          if (headers[j]) {\r\n            obj[headers[j]] = d;\r\n          }\r\n        }\r\n\r\n        // remove the blank rows\r\n        if (Object.values(obj).filter((x) => x).length > 0) {\r\n          list.push(obj);\r\n        }\r\n      }\r\n    }\r\n\r\n    // prepare columns list from headers\r\n    const columns = headers.map((c) => ({\r\n      name: c,\r\n      selector: c,\r\n    }));\r\n    console.log(\"list\", list, \"columns\", columns);\r\n    let addresses = [];\r\n    let amounts = [];\r\n    let result = [];\r\n    list.map((el) => {\r\n      // let address;\r\n      // let isValid;\r\n      // try {\r\n      //   address = toChecksumAddress(el.Address);\r\n      //   isValid = checkAddressChecksum(address);\r\n      //   if (isValid && el.Amount > 0) {\r\n      result.push(el.Address);\r\n      result.push(el.Amount + \"\\n\");\r\n      addresses.push(el.Address);\r\n      amounts.push(el.Amount);\r\n      //   }\r\n      // } catch (error) {\r\n      //   console.log(error);\r\n      // }\r\n    });\r\n    console.log(amounts, addresses);\r\n    console.log(result);\r\n\r\n    setTextArea(result.join());\r\n    checkInputs(result);\r\n\r\n    set_amount(amounts);\r\n\r\n    set_to(addresses);\r\n  };\r\n\r\n  function handleFile(e) {\r\n    const file = e.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.onload = (evt) => {\r\n      /* Parse data */\r\n      const bstr = evt.target.result;\r\n      const wb = XLSX.read(bstr, { type: \"binary\" });\r\n      /* Get first worksheet */\r\n      const wsname = wb.SheetNames[0];\r\n      const ws = wb.Sheets[wsname];\r\n      /* Convert array of arrays */\r\n      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\r\n      processData(data);\r\n    };\r\n    reader.readAsBinaryString(file);\r\n  }\r\n\r\n  const handleText = (text) => {\r\n    let result = text.split(\" \").join(\"\").split(\"\\n\").join(\"\").split(\",\");\r\n    checkInputs(result);\r\n  };\r\n\r\n  const checkInputs = (result) => {\r\n    let addresses = [];\r\n    let amounts = [];\r\n    let errormsg = \"\";\r\n    let line = 0;\r\n    for (var i = 0; i < result.length; i += 2) {\r\n      line++;\r\n      addresses.push(result[i]);\r\n      result[i + 1] && amounts.push((result[i + 1] * 10 ** 18).toString());\r\n      let checkAddress;\r\n      try {\r\n        checkAddress = toChecksumAddress(result[i]);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n\r\n      if (!checkAddress) {\r\n        console.log(`${result[i]} it's not a valid address`);\r\n\r\n        errormsg = `line ${line}: ${result[i]} is a invalid wallet address and wrong amount. E.g:address,number`;\r\n      } else if (!Number(result[i + 1])) {\r\n        console.log(`${result[i + 1]} it's not a valid number`);\r\n        errormsg = `line ${line}: ${result[i + 1]}  is a invalid wrong amount`;\r\n      }\r\n    }\r\n    setErrorMsg(errormsg);\r\n    set_to(addresses);\r\n    set_amount(amounts);\r\n  };\r\n\r\n  const nextStep = () => {\r\n    setActiveStep(activeStep + 1);\r\n  };\r\n\r\n  const prevStep = () => {\r\n    setActiveStep(activeStep - 1);\r\n  };\r\n\r\n  const checkAllowance = async () => {\r\n    if (tokenToSend !== \"BNB\") {\r\n      console.log(tokenToSend, \"token\");\r\n      try {\r\n        const options = {\r\n          chain: \"bsc testnet\",\r\n\r\n          owner_address: window.ethereum.selectedAddress,\r\n          spender_address: \"0x3457EbBE22064f0aC5a1C46Fc00b326fB7013cA2\",\r\n          address: tokenToSend,\r\n        };\r\n        const allowance = await Moralis.Web3API.token.getTokenAllowance(\r\n          options\r\n        );\r\n        if (Number(allowance.allowance) < 500000 * 10 ** 18) {\r\n          setIsAllowed(false);\r\n          console.log(\"no\");\r\n        } else {\r\n          setIsAllowed(true);\r\n          console.log(\"si\");\r\n        }\r\n        console.log(allowance);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkBalanceForTransfer = async () => {\r\n    let total = totalAmount();\r\n\r\n    let token = await userBalances.find((e) => e.token_address === tokenToSend);\r\n    let decimals = token.decimals || 18;\r\n    let balance = token.balance / 10 ** decimals;\r\n    setSelectedTokenBalance(balance);\r\n    console.log(balance, \"balance\", decimals);\r\n\r\n    if (total > balance) {\r\n      setBalanceError(\"Not Enough Balance to Transfer\");\r\n    } else if (!transactionCost) {\r\n      setBalanceError(\r\n        \"Can't calculate transaction cost, transaction may fail, please verify if the token is approved for transfer\"\r\n      );\r\n    } else {\r\n      setBalanceError(\"\");\r\n    }\r\n\r\n    return balance;\r\n  };\r\n\r\n  const removeRecipient = (index) => {\r\n    const new_to = _to.filter((el, key) => {\r\n      return key !== index;\r\n    });\r\n    const new_amount = _amount.filter((el, key) => {\r\n      return key !== index;\r\n    });\r\n\r\n    set_to(new_to);\r\n    set_amount(new_amount);\r\n  };\r\n\r\n  const totalAmount = () => {\r\n    let total = 0;\r\n    _amount.map((el) => (total = total + Number(el) / 10 ** 18));\r\n    return total;\r\n  };\r\n\r\n  const costOperation = async () => {\r\n    let cost;\r\n    if (transactionType === \"sendETH\") {\r\n      cost = await estimateEthSend(_to, _amount);\r\n\r\n      console.log(\"eth send\");\r\n    } else if (transactionType === \"bulkETH\") {\r\n      cost = await estimateEthBulk(_to, _amount);\r\n\r\n      console.log(\"eth bulk\");\r\n    } else if (transactionType === \"sendToken\") {\r\n      cost = await estimateTokenSend(tokenToSend, _to, _amount);\r\n\r\n      console.log(\"token send\");\r\n    } else if (transactionType === \"bulkToken\") {\r\n      cost = await estimateTokenBulk(tokenToSend, _to, _amount);\r\n\r\n      console.log(\"token bulk\");\r\n    }\r\n    if (cost) {\r\n      setTransactionCost(cost / 10 ** 18 + \" BNB\");\r\n    } else {\r\n      setTransactionCost(\"can't calculate transaction cost\");\r\n    }\r\n  };\r\n\r\n  const sendTransaction = async () => {\r\n    setIsSending(true);\r\n\r\n    let receipt;\r\n    if (transactionType === \"sendETH\") {\r\n      console.log(\"eth send\");\r\n      receipt = await Ethsend(_to, _amount);\r\n    } else if (transactionType === \"bulkETH\") {\r\n      console.log(\"eth bulk\");\r\n      receipt = await sendEthBulk(_to, _amount);\r\n      console.log(receipt);\r\n    } else if (transactionType === \"sendToken\") {\r\n      console.log(\"token send\");\r\n      receipt = await TokenSend(tokenToSend, _to, _amount);\r\n      console.log(receipt);\r\n    } else if (transactionType === \"bulkToken\") {\r\n      console.log(\"token bulk\");\r\n      receipt = await sendTokenbulk(tokenToSend, _to, _amount);\r\n      console.log(receipt);\r\n    }\r\n    setIsSending(false);\r\n  };\r\n\r\n  const login = async () => {\r\n    await Moralis.authenticate().then(function (user) {\r\n      console.log(user.get(\"ethAddress\"));\r\n      getBalances();\r\n    });\r\n  };\r\n\r\n  const getBalances = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const options = {\r\n          chain: \"bsc testnet\",\r\n          address: window.ethereum.selectedAddress,\r\n        };\r\n        const balances = await Moralis.Web3API.account.getTokenBalances(\r\n          options\r\n        );\r\n        const nativeBalance = await Moralis.Web3API.account.getNativeBalance(\r\n          options\r\n        );\r\n        balances.unshift({\r\n          name: \"BNB\",\r\n          token_address: \"BNB\",\r\n          balance: nativeBalance.balance,\r\n        });\r\n        setUserBalances(balances);\r\n        console.log(balances);\r\n      } catch (error) {\r\n        console.log(\"error\", error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const sameAmount = () => {\r\n    let sameAmount = true;\r\n    let amountToCompare = _amount[0];\r\n    _amount.map((i) => {\r\n      if (i !== amountToCompare) {\r\n        sameAmount = false;\r\n      }\r\n    });\r\n    return sameAmount;\r\n  };\r\n\r\n  const checkTransactionType = () => {\r\n    let isSameAmount = sameAmount();\r\n\r\n    if (tokenToSend === \"BNB\") {\r\n      if (isSameAmount) {\r\n        console.log(\"bnb same amount\");\r\n        setTransactionType(\"sendETH\");\r\n      } else {\r\n        console.log(\"bnb different amount\");\r\n        setTransactionType(\"bulkETH\");\r\n      }\r\n    } else {\r\n      if (isSameAmount) {\r\n        console.log(\"token same amount\");\r\n        setTransactionType(\"sendToken\");\r\n      } else {\r\n        console.log(\"token different amount\");\r\n        setTransactionType(\"bulkToken\");\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getBalances();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    costOperation();\r\n  }, [activeStep]);\r\n\r\n  // useEffect(() => {\r\n  //   checkAllowance();\r\n  // }, [tokenToSend]);\r\n\r\n  return (\r\n    <div>\r\n      <Button onClick={() => login()}> login </Button>\r\n      <h2>MultiSender</h2>\r\n\r\n      <Stepper activeStep={activeStep} alternativeLabel>\r\n        {steps.map((label) => (\r\n          <Step key={label}>\r\n            <StepLabel>{label}</StepLabel>\r\n          </Step>\r\n        ))}\r\n      </Stepper>\r\n      {activeStep === 0 && (\r\n        <>\r\n          {\" \"}\r\n          <br />\r\n          <h3>Token</h3>\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value=\"Token\"\r\n            style={{ width: 600 }}\r\n            label=\"Age\"\r\n            value={tokenToSend}\r\n            onChange={(e) => {\r\n              setTokenToSend(e.target.value);\r\n              checkAllowance();\r\n            }}\r\n          >\r\n            {userBalances.map((token) => {\r\n              const { token_address, name } = token;\r\n\r\n              return (\r\n                <MenuItem key={token_address} value={token_address}>\r\n                  {name} - {token_address}\r\n                </MenuItem>\r\n              );\r\n            })}\r\n          </Select>\r\n          <br />\r\n          <h3>Addresses with Amounts</h3>\r\n          <input type=\"file\" onChange={(e) => handleFile(e)} />\r\n          <br />\r\n          <TextareaAutosize\r\n            aria-label=\"minimum height\"\r\n            value={textArea}\r\n            onChange={(e) => {\r\n              setTextArea(e.target.value);\r\n              handleText(e.target.value);\r\n            }}\r\n            onPaste={(e) => {\r\n              setTextArea(e.target.value);\r\n              handleText(e.target.value);\r\n            }}\r\n            setTextArea\r\n            minRows={4}\r\n            placeholder=\"Insert Address and Amount separated by comma\"\r\n            style={{ width: 600, \"min-width\": \"200px\" }}\r\n          />\r\n          <h6>The address and amount are separated by commas</h6>\r\n          {errorMSG && <h3>{errorMSG}</h3>}\r\n          <br />\r\n          <Button\r\n            disabled={tokenToSend === \"\" || errorMSG ? 1 : 0}\r\n            // disabled={!isAllowed ? 1 : 0}\r\n            onClick={() => {\r\n              nextStep();\r\n              checkTransactionType();\r\n              checkBalanceForTransfer();\r\n            }}\r\n            variant=\"contained\"\r\n          >\r\n            next\r\n          </Button>\r\n          <br />\r\n          <br />\r\n          <Button variant=\"contained\" onClick={() => AproveSender(tokenToSend)}>\r\n            Aprove Token!\r\n          </Button>\r\n        </>\r\n      )}\r\n      {activeStep === 1 && (\r\n        <Stack\r\n          direction=\"column\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          spacing={1}\r\n        >\r\n          <h3>List of Recipients</h3>{\" \"}\r\n          <TableContainer sx={{ width: 650 }} component={Paper}>\r\n            <Table sx={{ width: 650 }} aria-label=\"simple table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell align=\"left\">Address</TableCell>\r\n                  <TableCell align=\"left\">Amount</TableCell>\r\n                  <TableCell align=\"center\"></TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {_to.map((address, index) => (\r\n                  <TableRow\r\n                    key={index}\r\n                    sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\r\n                  >\r\n                    <TableCell align=\"left\">{address}</TableCell>\r\n                    <TableCell align=\"left\">\r\n                      {_amount[index] / 10 ** 18}\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                      <Button onClick={() => removeRecipient(index)}>\r\n                        {\" \"}\r\n                        remove\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell align=\"left\">\r\n                    Total Recipients: {_to.length}\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    Total Amount: {totalAmount()}\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n            </Table>\r\n          </TableContainer>\r\n          <br />\r\n          <TableContainer sx={{ width: 650 }} component={Paper}>\r\n            <Table sx={{ width: 650 }} aria-label=\"simple table\">\r\n              <TableBody>\r\n                <TableRow key={\"a\"}>\r\n                  <TableCell align=\"left\">\r\n                    Total Number of Addresses: {_to.length}\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    Total Number of Tokens to be Sent: {totalAmount()}{\" \"}\r\n                    {\r\n                      userBalances.find((e) => e.token_address === tokenToSend)\r\n                        .symbol\r\n                    }\r\n                  </TableCell>\r\n                </TableRow>\r\n                <TableRow key={\"b\"}>\r\n                  <TableCell align=\"left\">\r\n                    Number of Transactions Needed: 1\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    Your Token Balance: {selectedTokenBalance}\r\n                    {\r\n                      userBalances.find((e) => e.token_address === tokenToSend)\r\n                        .symbol\r\n                    }\r\n                  </TableCell>\r\n                </TableRow>\r\n                <TableRow key={\"c\"}>\r\n                  <TableCell align=\"left\">\r\n                    Approximate Cost Operation: {transactionCost}\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    Your BNB Balance {userBalances[0].balance / 10 ** 18} BNB\r\n                  </TableCell>\r\n                </TableRow>\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <br />\r\n          {balanceError && <h3>{balanceError}</h3>}\r\n          <br />\r\n          <Stack\r\n            direction=\"row\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={2}\r\n          >\r\n            <Button onClick={() => prevStep()} variant=\"contained\">\r\n              prev\r\n            </Button>\r\n\r\n            <Button\r\n              disabled={balanceError ? 1 : 0}\r\n              onClick={() => nextStep()}\r\n              variant=\"contained\"\r\n            >\r\n              next\r\n            </Button>\r\n          </Stack>\r\n        </Stack>\r\n      )}\r\n      {activeStep === 2 && (\r\n        <>\r\n          <Button\r\n            disabled={isSending ? 1 : 0}\r\n            onClick={() => sendTransaction()}\r\n            variant=\"contained\"\r\n          >\r\n            {isSending ? \"Sending...\" : \"Send Transaction\"}\r\n          </Button>\r\n          <br />\r\n          <br />\r\n          <Button onClick={() => prevStep()} variant=\"contained\">\r\n            prev\r\n          </Button>\r\n          <Button onClick={() => sendEthBulk(_to, _amount)} variant=\"contained\">\r\n            Send\r\n          </Button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BatchBNB;\r\n","import React, { useState } from \"react\";\r\n\r\nimport BatchBNB from \"./batchBNB\";\r\n\r\nfunction Home() {\r\n  const [page, setPage] = useState(0);\r\n  return (\r\n    <div>\r\n      <BatchBNB />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Home from \"./pages/home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"@fontsource/roboto\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}